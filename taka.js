/*BY FAJAR thx to aqul hexagon */
 const {
	WAConnection,
	 MessageType,
	Presence,
	MessageOptions,
	Mimetype,
	 WALocationMessage,
	WA_MESSAGE_STUB_TYPES,
	ReconnectMode,
	ProxyAgent,
	GroupSettingChange,
	waChatKey,
	mentionedJid,
	processTime,
	generateMessageID,
    	ChatModification
} = require('@adiwajshing/baileys');
const wa = require('./whatsapp/message')
const { msgFilter } = require('./lib/antispam.js')
const skrep = require('./skrep')
const moment = require("moment-timezone");
const fs = require("fs");
const { exec, spawn } = require('child_process');
const speed = require('performance-now');
const ffmpeg = require('fluent-ffmpeg');
const { fromBuffer } = require('file-type');
const FormData = require('form-data');
const encodeUrl = require('encodeurl');
const imgbb = require('imgbb-uploader')
const request = require('request');
const conn = require('./main');
const {color} = require('./lib/color');
const {help, stickmenu} = require('./lib/help');
const mess = JSON.parse(fs.readFileSync('./whatsapp/mess.json'));
const axios = require('axios');
const ms = require('parse-ms');
const { removeBackgroundFromImageFile } = require('remove.bg')
const tiktod = require('tiktok-scraper')
const hx = require('hxz-api')
const akaneko = require('akaneko')
const ame = require('amethyste-api')
const ameapi = new ame('4e5ede2d81e0aee98dec15ee01500d63171662b8ddc3b0dc99bdbd41a4324c945a46e04d80771dc1019560cd4a7fe82b2e3de77d156dca9e88f8bc58a7f5ed05')
const google = require('google-it')
const yts = require('yt-search')
const gis = require('g-i-s')
const zrapi = require('zrapi')
const Ra = require('ra-api')
const zahir = require('zahir-api')
const brainly = require('brainly-scraper-v2')
const qrcode = require("qrcode-terminal")
const infotlp = require('no-telp')
const express = require('express')
const app = express()
const simple = require('./lib/simple')
const PORT = process.env.PORT || 5000
const imageToBase64 = require('image-to-base64')
const translate = require('@vitalets/google-translate-api')
const { yta, ytv, igdl, upload } = require('./lib/ytdl')
const fetch = require('node-fetch');
const { EmojiAPI } = require("emoji-api");
djadibot = JSON.parse(fs.readFileSync('./src/djadibot.json'))
pendaftar = JSON.parse(fs.readFileSync('./src/pendaftar.json'))
const emoji = new EmojiAPI();
const base64Img = require('base64-img')
const fakeUa = require('fake-useragent');
const SocketIO = require('socket.io')
const Exif = require('./lib/exif');
const exif = new Exif();
const tovid = require('./lib/tovideo')
const { jadibot, jadibot2} = require('./src/jadibot.js')
setting = JSON.parse(fs.readFileSync('./setting.json'))
const { uploadimg } = require('./lib/uploadimg');
let stikernye = JSON.parse(fs.readFileSync('./src/stiker.json'))
let tothit = JSON.parse(fs.readFileSync('./src/hit.json'))
const welkam = JSON.parse(fs.readFileSync('./src/welkam.json'))
const welkom = JSON.parse(fs.readFileSync('./src/welkom.json'))
const left = JSON.parse(fs.readFileSync('./src/left.json'))
const tleft = JSON.parse(fs.readFileSync('./src/tleft.json'))
const gambarnye = JSON.parse(fs.readFileSync('./src/image.json'))
const audionye = JSON.parse(fs.readFileSync('./src/audio.json'))
const videonye = JSON.parse(fs.readFileSync('./src/video.json'))
const mute = JSON.parse(fs.readFileSync('./src/mute.json'))
const gchange = JSON.parse(fs.readFileSync('./src/gupdated.json'))
const note = JSON.parse(fs.readFileSync('./src/notes.json'))
const asupan = ["120416207_674661289840975_7238538460676645249_n.mp4","120443017_225738842307010_1507614018538871668_n.mp4","120506710_129730895516659_9090102890235113922_n.mp4","120518115_3382156938497131_2702539154432231938_n.mp4","120533450_988960268238482_4908300175960396265_n.mp4","120554993_913582535835353_7937155730001219945_n.mp4","120565745_258483202099028_1831534734126408497_n.mp4","120570166_2716242608644571_5562452335611050430_n.mp4","120571358_3743879342322868_4731152347084614368_n.mp4","120571938_198275171805822_8506241533969509004_n.mp4","120573034_128654721967389_1837144340570017830_n.mp4","120574217_2707319792866165_3682328392840010261_n.mp4","120575986_151816433263092_6600262966520398271_n.mp4","120582400_339926344091433_2581248581156693603_n.mp4","120583739_1060190921079212_3898520254664507328_n.mp4","120587415_638776546998307_3091093882267818607_n.mp4","120589771_752670855329266_5064573607465519463_n.mp4","120613860_3393110177444352_4287165838359264124_n.mp4","120614859_768632723701773_5662521620734316774_n.mp4","120615019_149392973357031_6254963333779779708_n.mp4","120664457_338629710563119_6615226849280369453_n.mp4","120670762_191033325874671_8168246094200167609_n.mp4","120678112_971693299972883_1648826221504742220_n.mp4","120682363_1181866688854694_4233466354892721595_n.mp4","120698858_1302470566751609_3736999773452225729_n.mp4","120707049_337981777304231_3152650741169851669_n.mp4","120714412_680680702806959_2149499366562729814_n.mp4","120678112_971693299972883_1648826221504742220_n.mp4","120682363_1181866688854694_4233466354892721595_n.mp4","120698858_1302470566751609_3736999773452225729_n.mp4","120707049_337981777304231_3152650741169851669_n.mp4","120714412_680680702806959_2149499366562729814_n.mp4","120729883_377241769982767_642715046771519958_n.mp4","120741456_1395316090659305_3110631973366381441_n.mp4","120804593_375071033671397_730042634632696040_n.mp4","120811928_330321474737175_3822013398976938583_n.mp4","120827732_420952185557269_5167357444190622531_n.mp4","121295788_784206982151618_6038841027462332944_n.mp4","121397161_184551316508349_5165670393574165941_n.mp4","121397161_184551316508349_5165670393574165941_.mp4","121490453_375667816940042_452419418652125867_n.mp4","121490692_1088317691600143_548516704252213826_n.mp4","121512378_353672009084447_4807177857049781204_n.mp4","121514904_1394510664087772_4892116957337248229_n.mp4","121532200_3230547633739858_7235249192613555721_n.mp4","121543814_392221925520356_303723117892337663_n.mp4","121566321_1967512323390748_8144044345456106322_n.mp4","121569003_3794961287195185_5240770287194085749_n.mp4","121570428_3649598918408334_760862153363411335_n.mp4","121587556_270383600856171_7968543183520180693_n.mp4","121598277_725143885010216_2702670580432436899_n.mp4","121601719_426270495031386_30694262768775241_n.mp4","121609403_120034726353475_3893222109332425758_n.mp4","121612312_878485046018534_5289861003344220782_n.mp4","121613042_341575146916700_5517565558462194152_n.mp4","121626779_125426819058957_5972135792117349573_n.mp4","121638626_272649507265577_2820970834218299552_n.mp4","121641487_262449401789781_827591489039254325_n.mp4","121677336_788393261894163_9130920773531067993_n.mp4","123028471_2408598322779397_6239627531739814509_n.mp4","123260804_189929405997462_9012418470477994278_n.mp4","123277749_175348317470558_9168794939364708729_n.mp4","123287511_1077114019377699_5242512396101351610_n.mp4","123297814_376057496966433_1804568275746178180_n.mp4","123323731_2819106155006753_1694984579845943046_n.mp4","123323758_184286839845625_5873725071990174983_n.mp4","123333623_360678961661756_3602292858765963678_n.mp4","123371526_690851954892873_8778378882841686432_n.mp4","123378729_1000441247125635_585752599614538874_n.mp4","123381939_654928755187710_742178935407729090_n.mp4","123409727_832687040840236_2963075506306126159_n.mp4","123445711_2800949130172895_7092610674854075926_n.mp4","123453267_416624299746388_1511915930493422331_n.mp4","123455588_345186733444264_4396311316061632404_n.mp4","123500665_2836118109966517_3102834591166602919_n.mp4","123521796_357984642134434_1802311042714502909_n.mp4","123542025_2845611382343239_831943804862462614_n.mp4","123556362_1280079069021214_3345337485962200490_n.mp4","123569557_365202624795294_2728896265499212786_n.mp4","123573448_130251201864200_7295768672468917620_n.mp4","123587347_114537743787382_2845633249688911968_n.mp4","123596992_715011965769817_6777952438937905372_n.mp4","123601313_270861867680037_230994305622759150_n.mp4","123647447_1241314709574443_7900597514262956765_n.mp4","123651942_113163840594908_5911088915138610863_n.mp4","123652281_676585636331144_7759813084260314645_n.mp4","123652886_2756604041245267_554311733099189604_n.mp4","123687117_407973883930771_6768076544736275668_n.mp4","123751537_1350250368654125_2389176963671527187_n.mp4","125212384_186456313016272_5162265801592575809_n.mp4","125254107_178885417177244_1105325353746932227_n.mp4","125284565_513908636233888_69009428520626407_n.mp4","125317827_231338411754314_8518900481639810419_n.mp4","125323618_442715620044777_4598370450433270099_n.mp4","125325091_830637374427499_4752630023678402259_n.mp4","125346396_905421309991283_4110647350514586376_n.mp4","125359182_283589459696878_5383925249101178814_n.mp4","125367973_1218106035256470_988617579188450178_n.mp4","125371373_3738768102820304_4754315020569952949_n.mp4","125378544_1823151984502035_7844288211973444656_n.mp4","125379607_3734759863254560_2325437916629979187_n.mp4","125383957_1073734126411322_6955280436362350435_n.mp4","125383961_419657952401795_7748869414057466769_n.mp4","125397507_416605842678742_754955199998335679_n.mp4","125402227_3445654472219091_5145243359566882695_n.mp4","125404011_129462145323201_7539236374641864743_n.mp4","125432273_3463914000361360_80943810357765972_n.mp4","125432273_847166969392739_5194773877041886714_n.mp4","125441320_212418020271600_3723405180996386611_n.mp4","125441821_374284747143682_6833682673999077197_n.mp4","125457197_939060920176605_3373640944915971320_n.mp4","125469587_664762604401747_8478841961051985072_n.mp4","125473444_3598474430190976_4863478878022455697_n.mp4","125476006_186333902985787_5328260125608179801_n.mp4","125486465_3284880111639574_5773868724581713210_n.mp4","125487195_994460057742657_801958314998702647_n.mp4","125487935_798571417385585_6338491231945644941_n.mp4","125494209_830571854439496_6464078110296582065_n.mp4","125504624_984342912063400_6053015688924880657_n.mp4","125511156_3460884207323237_4738466427721464723_n.mp4","125530440_686257325587124_7155945421554619695_n.mp4","125568436_1751537785025067_3038063275203112140_n.mp4","125802010_156915472828677_2222924110245536950_n.mp4","125835165_194473625633725_4714990298742713146_n.mp4","125888509_760642408127901_5042230183914288338_n.mp4","126090113_770959473629329_6517172673366169479_n.mp4","126148595_435507257837528_2723643280995745836_n.mp4","127078660_2772266482988429_3777781937048595220_n.mp4","127428581_3721919077926656_1980508027008241975_n.mp4","127666434_218900759668749_243809115705801385_n.mp4","127695290_388607749252491_3998760994986192907_n.mp4","127698404_413204873139552_4390634034381765715_n.mp4","127741266_672060876831807_6212680518909090993_n.mp4","127759214_1316377072042033_2289381783837995163_n.mp4","127786736_193803338876279_6218024250790794214_n.mp4","127803697_372767250655243_1237197903183086691_n.mp4","127814419_178117070668936_7119356404039810145_n.mp4","127825559_135997734661937_2064814642348000602_n.mp4","127872807_753491438570815_9144850924654537203_n.mp4","127878970_377589730238156_5496039262194530277_n.mp4","127885705_165561891927133_7813013137042494810_n.mp4","127910435_421001965583024_8224765881527794379_n.mp4","127922919_380452793240049_6107863806231274974_n.mp4","127928872_791466181694783_7029564527208132080_n.mp4","127943254_2690941681219728_2498311266548857223_n.mp4","127944202_3394011220727705_5910560450627958474_n.mp4","127950174_198514685182390_3852187849422892819_n.mp4","127963264_134228214873437_2274411192390281146_n.mp4","127969540_1022071124962585_7878091385391612463_n.mp4","128017043_3333825663382111_9064797746153181794_n.mp4","128025979_387341516016832_6835626556515997282_n.mp4","128027473_1072659286488529_4001589945837246807_n.mp4","128066337_159900255864629_7185506772474207057_n.mp4","128076257_504152990469970_1799450215903361423_n.mp4","128145274_2102531819877107_4242008978951137236_n.mp4","128188610_653508191986586_9190217747134819421_n.mp4","128206456_158278809325170_8801367452607516620_n.mp4","128246582_185677669885825_7966447517507067921_n.mp4","128259532_425509128617080_9015085437987137300_n.mp4","128330811_490971755197262_1449694805447918838_n.mp4","128333747_2847669408843159_8074240131352891587_n.mp4","128344995_1088665324904718_5555697528500884747_n.mp4","128378360_1221539134913427_2186594370064363973_n.mp4","128414409_211508863684934_5197215850580495308_n.mp4","128480007_3650078831724755_9035303241028410722_n.mp4","128551817_1385761641772162_8839180644227982069_n.mp4","128557282_381910766354941_3282019119287587745_n.mp4","128560337_673087190067161_3358804965100104886_n.mp4","128566495_685183425513336_542960862702246487_n.mp4","128644923_3460118457415274_651620093041433668_n.mp4","128660681_839206500212516_3301239613632988858_n.mp4","128742960_186298706436371_4607803898160062118_n.mp4","119930258_627214704820893_9219364416094239883_n.mp4","119939014_2457273414566766_9126575280518284517_n.mp4","119949524_358351798872439_5503033100335937280_n.mp4","119952469_130614288411586_4487697345655735110_n.mp4","119952801_3147642238680825_599898071120155996_n.mp4","119953688_269011514148606_7940324136632902320_n.mp4","119963869_447720746204211_4852530316542513267_n.mp4","119970663_383807662627187_820172776571565463_n.mp4","119970790_3360502694003334_5874657897733680432_n.mp4","119981553_360177865031436_6621383024692773955_n.mp4","119988398_365008104633577_7130478759001976164_n.mp4","119989159_368335501214543_218852251002687433_n.mp4","119989849_2866151483671100_4737795668219064901_n.mp4","119991754_359310011878492_336932860235757347_n.mp4","119992008_194303512073566_5333854273901071894_n.mp4","119992733_196822511807203_6755722125118018772_n.mp4","119992918_360330175349819_7455277922289132379_n.mp4","119994538_148754556910530_8680372615718513840_n.mp4","119996441_653084385325962_6798238394011293273_n.mp4","119996671_836428530432210_3722728141241272869_n.mp4","119998307_328574064916051_4599195065755365448_n.mp4","120002184_117994126544209_691737397420355350_n.mp4","120005668_2784892355098406_5336818218977807726_n.mp4","120005695_661736727787055_6893407946691469852_n.mp4","120013296_191366472510029_8805746613615915579_n.mp4","120014345_360760565053656_6262146738978492481_n.mp4","120015511_460496988193327_3099405689617677193_n.mp4","120016418_733480030564774_1447958835533193488_n.mp4","120021938_332264791442994_5384805943398573946_n.mp4","120025880_651590429092882_7854113116963251907_n.mp4","120028346_901308043727378_728890142441278271_n.mp4","120029313_666758687292618_5563444298182327289_n.mp4","120030259_972429556609809_4491568713410899317_n.mp4","120032158_326427045330682_5292648343729828545_n.mp4","120032881_123107585952008_7450146213348713492_n.mp4","120033569_1650766325100702_1343206980156160323_n.mp4","120037353_332493308175393_868381168815760195_n.mp4","120039935_362500371610167_5188248340222582230_n.mp4","120042702_365036308194779_1981247559002952269_n.mp4","120042822_617354565624321_71973205987957640_n.mp4","120045920_169998561345375_6945425038599297992_n.mp4","120046854_643371579513329_6004505202628360433_n.mp4","120047690_327721318306712_7430012221612333808_n.mp4","120047828_144401964015327_1017468140980538014_n.mp4","120048695_1472828272900704_1503939088574322390_n.mp4","120049270_364750351571198_5891472577722146686_n.mp4","120049349_1791553601007934_2611212736432907207_n.mp4","120049699_613762259306399_2397498671219703671_n.mp4","120051193_346276016427722_973887525806233488_n.mp4","120054426_114575816932323_1553248784344248956_n.mp4","120058784_155883302866461_5068005263317674464_n.mp4","120062539_1209581649416863_7140160980398004694_n.mp4","120062897_332077674755804_5748730395746791962_n.mp4","120067388_773465266783144_2927982808988050189_n.mp4","120069200_648231432563728_3425548223505367388_n.mp4","120070970_1112469872482195_5076036120626386006_n.mp4","120076785_1233852613664689_8015446920688916672_n.mp4","120079628_193893628807612_5481065241566964162_n.mp4","120079725_2729026330708972_6869914303074021510_n.mp4","120080276_2408279029466802_7007775469557411916_n.mp4","120080276_369071911168683_6432203442988112453_n.mp4","120081417_981034225693938_6805315246611251234_n.mp4","120081886_268169877588660_9181868763641140091_n.mp4","120082394_457459425179794_5839804195822348084_n.mp4","120083093_345734700180334_3264982378341795903_n.mp4","120083409_754918865071227_729406298803623924_n.mp4","120083566_657345741871466_2955352127521931615_n.mp4","120084495_193518318846337_8341454463644002065_n.mp4","120085274_243496707098184_8463340991452218356_n.mp4","120086197_1756508094511685_4827232165605587719_n.mp4","120086699_620018292013290_7044191653025761751_n.mp4","120087118_327126708382157_1219335932410390719_n.mp4","120087819_1439380026271841_4450973356520480870_n.mp4","120090436_727686364756356_2657733203823655121_n.mp4","120090755_362188344976489_354300070080658280_n.mp4","120090786_175391927449043_2202916725466714362_n.mp4","120091175_249697103060660_7145928003312584440_n.mp4","120091273_616278442397457_5567616376647269145_n.mp4","120091281_187398086242604_7925578089512211033_n.mp4","120091281_2784711105118603_7109462491437409829_n.mp4","120091363_1571693969659324_7523246743745912383_n.mp4","120091747_369225034234045_186459701953922835_n.mp4","120093176_944010642761712_1017399352737989682_n.mp4","120093177_1037538266703459_15920958150752173_n.mp4","120093682_122099286073556_144115941470397259_n.mp4","120094422_175611380715697_7744736183201264582_n.mp4","120094493_265044214637399_226439421781799170_n.mp4","120095682_337974460812403_7233629019405825183_n.mp4","120096298_1815974128556676_8034864615529351337_n.mp4","120096553_618790575472664_7654762155184355145_n.mp4","120096945_335554957868683_2100625578183385100_n.mp4","120097265_699182937334813_1271446225389595604_n.mp4","120098758_3270617809725380_7920655788158075171_n.mp4","120099784_330266711538710_3777448858908033879_n.mp4","120099810_3292369767544959_856416031630538814_n.mp4","120100032_2083832335080782_6985300700587210331_n.mp4","120101753_196700801839636_5733564565143296684_n.mp4","120101891_166603608391056_7030314956962662871_n.mp4","120103271_2851271198306486_2240380031852546220_n.mp4","120103477_1204221429949491_1110248483223659232_n.mp4","120103898_638978266821460_3927713687451598573_n.mp4","120104895_132137331934059_838060088282366886_n.mp4","120105700_356865382124761_6238584632684495276_n.mp4","120107182_3835422573158411_8854348428079046188_n.mp4","120108592_322895115609456_3359778615761888890_n.mp4","120108815_2575902892722385_4956585598551698598_n.mp4","120108974_383027992726811_6106388565781131594_n.mp4","120109070_846102782864056_7160693951142610692_n.mp4","120111851_256527648939448_5467176429548735342_n.mp4","120113492_196016021899081_6059727219611448514_n.mp4","120113493_704524980407154_2852920802200310502_n.mp4","120113560_171113101264366_3631624991862459209_n.mp4","120113685_871157653706211_1511195561178434513_n.mp4","120113909_328231415137902_3101532770142689822_n.mp4","120114517_125163039049040_8820948403617311979_n.mp4","120114757_2514305952193923_3592155487073754343_n.mp4","120114814_1028436974274162_2590818111483231195_n.mp4","120114888_366303691449276_7088862647685749715_n.mp4","120117114_1281206902222183_1610353119582637155_n.mp4","120120984_163674322056983_2606108549287154458_n.mp4","120121124_760981864477882_9085945941582015017_n.mp4","120121745_715680805687719_7373836394261956280_n.mp4","120121907_639329226743415_2637887994439298523_n.mp4","120127662_652592505671556_1328584727252418654_n.mp4","120127920_751987662319278_7652617050570339823_n.mp4","120128030_836742260395575_334998811959542573_n.mp4","120129146_125019955739444_1625218562200274394_n.mp4","120130187_247640953303495_3101479337263423949_n.mp4","120130404_351999342508565_1407242756558004463_n.mp4","120131664_980651239029116_407151668551474238_n.mp4","120131669_362233381713254_999485001043231116_n.mp4","120132131_149308530186767_1325961927541217491_n.mp4","120133750_246367850109415_8552806525238620507_n.mp4","120134327_1458944707627499_510885019516290726_n.mp4","120134546_187234869592435_5412632585998057315_n.mp4","120134919_378893240179672_8246851541794010928_n.mp4","120135393_167997615010299_768243050231908790_n.mp4","120135658_835304383875114_5064630271365926299_n.mp4","120135712_178483020408242_2985035029250221581_n.mp4","120136036_191177432417645_1104664854730966838_n.mp4","120136041_725674604686413_8486994745879869762_n.mp4","120137116_191851999151055_644156844647670828_n.mp4","120137120_740753256477707_2855693044645685783_n.mp4","120137278_336807627528374_4869115600028274184_n.mp4","120137407_1039374003180942_4112916702578530002_n.mp4","120139890_2491410474482380_3104417773628637531_n.mp4","120140512_196537371838474_2927317402021675264_n.mp4","120141315_679774599616363_2377743799080844616_n.mp4","120141589_710645706197260_4612284841699593423_n.mp4","120142024_327334668328400_8779645802226706049_n.mp4","120143066_342144553790569_1999844574916911497_n.mp4","120143251_329103418194858_6635760411661954630_n.mp4","120144154_125066542398242_3233724910549453161_n.mp4","120144607_209388277269519_2354043719929998089_n.mp4","120145518_322083425552017_1527653736208179124_n.mp4","120146086_176746400655651_769687400977086904_n.mp4","120146187_215090466613690_5945114564294866275_n.mp4","120146437_996711577443767_6096075509412081642_n.mp4","120147402_218762169581184_3711392821920124615_n.mp4","120150602_177619137188676_800572895233026740_n.mp4","120152301_190191475880328_8126264970769971540_n.mp4","120152504_770933577037350_6290229844656328267_n.mp4","120152936_3071167022995540_3641054771986950498_n.mp4","120153191_760916938081066_3371090863619243851_n.mp4","120154205_3338722129515517_7436038892532179716_n.mp4","120156189_252330402750699_3698540229589654836_n.mp4","120156645_699258057465846_6811427431972027334_n.mp4","120158386_816477462458118_7930664718232844670_n.mp4","120159153_775401629945705_3181821431813045225_n.mp4","120159408_4626270197413183_6847899026646222186_n.mp4","120160286_328071218470481_6439951180984889151_n.mp4","120160597_849191315887841_6725250633700202636_n.mp4","120160683_172899327719048_2354470927796945853_n.mp4","120160959_267564674338799_4007580127481835776_n.mp4","120163067_175832147517916_1017612233779818733_n.mp4","120163195_198705064949398_2667498924350696991_n.mp4","120164888_658889818081165_1385075892873013147_n.mp4","120167832_209935023903496_6154168644384780219_n.mp4","120168708_673952390186054_4208629049658052124_n.mp4","120172966_2896424160586201_3835028370008539260_n.mp4","120174881_133405275139695_8852736280322955289_n.mp4","120175151_562367277820839_7307465476364716470_n.mp4","120177841_782412769220133_7753731546991945196_n.mp4","120179574_674282703503830_4146590370739591872_n.mp4","120180572_173778484318994_7987560731833956615_n.mp4","120180860_977678629365971_6694271349827001079_n.mp4","120183118_619584012259888_8101318888822761707_n.mp4","120184137_1704710276360219_5397250818292163436_n.mp4","120188324_1042501026192442_6529908885704646960_n.mp4","120188983_381316822876308_8592003626663919987_n.mp4","120191716_3469088393156055_5003515228361402228_n.mp4","120192044_618486908843450_8016591654723251870_n.mp4","120192418_173279451042418_3515918595081503430_n.mp4","120193517_1456067401271129_480305286965345371_n.mp4","120193771_156051852843282_2771044457276890662_n.mp4","120193806_387719708920225_3913012716172616624_n.mp4","120194214_130731001723287_7434677710409382978_n.mp4","120195370_366720667818280_3545513672705861946_n.mp4","120195424_334030184575230_3523589688100671352_n.mp4","120196660_194313848746473_6127128904194471442_n.mp4","120198111_376144563401752_1945207418252365550_n.mp4","120202642_172483441102747_2142014905618281053_n.mp4","120206699_3118264244962811_5756251184376731784_n.mp4","120207238_1193850604303866_1402118470561290617_n.mp4","120209310_202609694555923_2540627788042500129_n.mp4","120212057_173654457573465_7106798991469668745_n.mp4","120212768_661539478103536_7965332810467861957_n.mp4","120214492_790274951797214_2079912101003639900_n.mp4","120220247_191127155757003_6576818340404999754_n.mp4","120228735_200511238176141_5362144619816949158_n.mp4","120232111_986362915120501_5502397298413978002_n.mp4","120233857_764184241040850_316021775369184451_n.mp4","120241802_723293444922314_1967170404053536279_n.mp4","120244034_856087201592936_1217061845667232263_n.mp4","120245804_776808379806690_6340210441871288578_n.mp4","120255590_898721347200367_8927346009123595188_n.mp4","120256536_151995863018362_5194138843274156148_n.mp4","120257144_155681809540601_6153651449160106873_n.mp4","120258800_327198728604748_275403014084661099_n.mp4","120261884_344539376960537_2275334064908304805_n.mp4","120262956_692645491349688_8194921321767075289_n.mp4","120267125_372067850618105_6076810258959304818_n.mp4","120272865_1217524928602242_4309228617548937325_n.mp4","120278332_180055090281048_3923169246451954588_n.mp4","120282879_335458061209909_4373393781196877707_n.mp4","120283699_770671770381684_2935210865533798285_n.mp4","120286752_2730960050504045_2056849291302446180_n.mp4","120288296_354916589193753_6940981336473789223_n.mp4","120289944_1575802852614653_5314642735046309597_n.mp4","120298219_2795986887395327_493423245678918453_n.mp4","120299899_398233621166284_2118920185591007148_n.mp4","120304101_610083359659979_5541068604106487407_n.mp4","120304689_3671643716213454_7458435375237896881_n.mp4","120322352_273994520288067_5744398854183614873_n.mp4","120322704_764038930822374_8895706270837027298_n.mp4","120326370_614290152586217_3129789443755717856_n.mp4","120346577_1044755759314941_7531796068598577785_n.mp4","120352961_152341456536862_3142895669685685617_n.mp4","120358265_329366088370876_6096480596356652427_n.mp4","120367893_640520999941074_1791139700038544911_n.mp4","120372856_2770201646588936_8871173019542637155_n.mp4","120378085_150459090090092_8011089681612362003_n.mp4","120395924_440750123567795_583334481650421647_n.mp4","120441831_639998669997240_161423998508146950_n.mp4","120449298_169095894815610_3437648896825351317_n.mp4","120460243_168766858130708_346226294895325394_n.mp4","120462124_350214889513566_8652588230173653957_n.mp4","120473852_1380773045452297_6704705667001206011_n.mp4","120479239_153389103094157_2098491271428309856_n.mp4","120494639_620191855312716_8289096128990454104_n.mp4","120505249_132570755220623_177286137672347295_n.mp4","120509422_2669597319947153_6878962327933619039_n.mp4","120511489_1086738411759690_6875927955519059724_n.mp4","120523990_495728328056089_234281255969158351_n.mp4","120529991_198398271639165_5932981118781631936_n.mp4","120534041_335103401073907_1618331974869043033_n.mp4","120537012_642123666693948_6583923366052686740_n.mp4","120538772_329246724841807_8389883923966728150_n.mp4","120545508_134823331675262_8741188437318775298_n.mp4","120551788_3572796712945519_4087188203845597919_n.mp4","120552009_391372451863136_6610707416685334040_n.mp4","120552443_102706818238728_4017338749671351671_n.mp4","120553033_792785421294502_8366716441205400971_n.mp4","120553636_342870323689657_2245456249653992338_n.mp4","120554348_931095784047216_112110857867263107_n.mp4","120559924_371952004190191_4424481126711041313_n.mp4","120561360_778721656285859_4278710814336564107_n.mp4","120563035_136727141489435_1546528748993022195_n.mp4","120570577_367174571077927_4964185605550052929_n.mp4","120570790_818779045526273_2632773598835243600_n.mp4","120573404_610418193169987_6992275440045691366_n.mp4","120595257_163111358756285_8928488128704232424_n.mp4","120609368_985358921964231_9075282251798845545_n.mp4","120609757_1186949548792859_5656158036920336643_n.mp4","120619528_2852921654942424_1439716134901283201_n.mp4","120661976_3890433084318417_5602248168787640160_n.mp4","120663179_2397774143860345_4993944844155077062_n.mp4","120673021_349720712894896_6386850015861431274_n.mp4","120680740_807876640039623_7873989252862600954_n.mp4","120690982_807932886702170_5978012251318214933_n.mp4","120698016_2804098276501743_2360251167086770513_n.mp4","120698558_174795444133532_3448544704516457722_n.mp4","120712915_378312253184961_1769224980730905311_n.mp4","120722399_761031884740194_9195491019375310623_n.mp4","120759480_339128094065762_4796357201131417971_n.mp4","120763342_642566019963208_1218772805801674221_n.mp4","120763658_131955115300386_3877230116654508182_n.mp4","120775498_380180726326827_4354755139409617473_n.mp4","120785472_468008400828171_56915071807479224_n.mp4","120798972_743980876181250_7749682450123175728_n.mp4","120798974_339539070600006_6213117462998255183_n.mp4"]
const vcard = 'BEGIN:VCARD\n'
            + 'VERSION:3.0\n'
            + 'FN:Ownerbot\n'
            + 'ORG:</ Hi there, Im using Telegram;\n'
            + 'TEL;type=CELL;type=VOICE;waid=6287798005230:+62-877-9800-5230\n'
            + 'END:VCARD'

fakecap = setting.fakecap
fakeimage = fs.readFileSync(`./media/zynn.jpeg`)
publicc = setting.public
fakec = setting.fake
nopref = 'multi'
shp = "♦️"
fakenomor = '0@s.whatsapp.net'
autoread = false
fakerep = setting.fakerep
tmp_hit = []
const time = moment().tz('Asia/Jakarta').format("HH:mm:ss")
//welkam/left
app.use('/', (req, res) => {  
conn.connects()
console.log("on bang bot nya")
})
let server = app.listen(PORT, () => console.log(`Listening On Port ${PORT}`))
let io = SocketIO(server)
    io.on('connection', socket => {
console.log('hehe')
        let { unpipeEmit } = pipeEmit(conn, socket, 'conn-')
        socket.on('disconnect', unpipeEmit)
    })

function pipeEmit(event, event2, prefix = '') {
    let old = event.emit
    event.emit = function (event, ...args) {
        old.emit(event, ...args)
        event2.emit(prefix + event, ...args)
    }
    return {
        unpipeEmit() {
            event.emit = old
        }
    }
}
module.exports = zynn = async (zynn, tod) => {
    try {
        if (!tod.hasNewMessage) return
        tod = tod.messages.all()[0]
		if (!tod.message) return
		if (tod.key && tod.key.remoteJid == 'status@broadcast') return
	        global.Prefix
/*		let infoMSG = JSON.parse(fs.readFileSync('./src/.dat/msg.data.json'))
      infoMSG.push(JSON.parse(JSON.stringify(tod)))
      fs.writeFileSync('./src/.dat/msg.data.json', JSON.stringify(infoMSG, null, 2))
      const urutan_pesan = infoMSG.length
      if (urutan_pesan === 5000) {
         infoMSG.splice(0, 4300)
         fs.writeFileSync('./src/.dat/msg.data.json', JSON.stringify(infoMSG, null, 2))
      }*/	if ((Object.keys(tod.message)[0] === 'ephemeralMessage' && JSON.stringify(tod.message).includes('EPHEMERAL_SETTING')) && tod.message.ephemeralMessage.message.protocolMessage.type === 3) {
                teks = 'Tandai Telah Dibaca\nSeseorang mengirim bug'
                teks += '\n'.repeat(100)
                teks += JSON.stringify(tod, null, 2)
		try{
			zynn.groupRemove(from, [tod.participant])
		}catch{
		}
		zynn.sendMessage(tod.key.remoteJid, teks, MessageType.text)
                zynn.sendMessage(tod.key.remoteJid, teks, MessageType.text)
}
		tod.message = (Object.keys(tod.message)[0] === 'ephemeralMessage') ? tod.message.ephemeralMessage.message : tod.message
	    	
		const content = JSON.stringify(tod.message)
		const from = tod.key.remoteJid
		const m = simple.smsg(zynn, tod)
		const type = Object.keys(tod.message)[0]
		const { text, extendedText, contact, location, liveLocation, image, video, sticker, document, audio, product } = MessageType
		const time = moment.tz('Asia/Jakarta').format('DD/MM HH:mm:ss')
		const cmd = (type === 'conversation' && tod.message.conversation) ? tod.message.conversation : (type == 'imageMessage') && tod.message.imageMessage.caption ? tod.message.imageMessage.caption : (type == 'videoMessage') && tod.message.videoMessage.caption ? tod.message.videoMessage.caption : (type == 'extendedTextMessage') && tod.message.extendedTextMessage.text ? tod.message.extendedTextMessage.text : ''.slice(1).trim().split(/ +/).shift().toLowerCase()
		const aprefix = /^[°${}π÷×¶∆£¢€¥®™✓=|~zZ+×!#$%^&./\\©^]/.test(cmd) ? cmd.match(/^[°${}π÷×¶∆£¢€¥®™✓=|~zZ+×!#$%^&./\\©^]/gi) : '-'
		noprefix = ''
		if(nopref == 'no'){
			prefix = noprefix
			slc = 0
			slc2 = 1
		}
		else if(nopref == 'multi'){
			prefix = aprefix
			slc = 1
			slc2 = 2
		}
		else{
			prefix = nopref
			slc = 1
			slc2 = 2
			}
		body = (type === 'conversation' && tod.message.conversation.startsWith(prefix)) ? tod.message.conversation : (type == 'imageMessage') && tod.message.imageMessage.caption.startsWith(prefix) ? tod.message.imageMessage.caption : (type == 'videoMessage') && tod.message.videoMessage.caption.startsWith(prefix) ? tod.message.videoMessage.caption : (type == 'extendedTextMessage') && tod.message.extendedTextMessage.text.startsWith(prefix) ? tod.message.extendedTextMessage.text : ''
		chats = (type === 'conversation') ? tod.message.conversation : (type === 'extendedTextMessage') ? tod.message.extendedTextMessage.text : ''
		//const command = body.slice(slc).trim().split(/ +/).shift().toLowerCase()
		tmplt = Object.keys(tod.message)[0] == "listResponseMessage" ? tod.message.listResponseMessage.selectedDisplayText : ""
                q2 = Object.keys(tod.message)[0] == "listResponseMessage" ? tod.message.listResponseMessage.singleSelectReply.selectedRowId : ""
		const command = body.replace(prefix, '').trim().split(/ +/).shift().toLowerCase()
		issticker = Object.keys(tod.message)[0] == "stickerMessage" ? tod.message.stickerMessage.fileSha256.toString('hex') : ""
		const args = body.trim().split(/ +/).slice(1)
		const isCmd = body.startsWith(prefix)
		const q = args.join(' ')
		const run = process.uptime()
		const arg = chats.slice(command.length + 1, chats.length)
		//const ramadhan = await axios.get('https://zynnbot-api.herokuapp.com/api/hitungmundur?apikey=XinzBot&tzynnl=12&bulan=4')
		//const ucapan = await axios.get('https://zynnbot-api.herokuapp.com/api/ucapan?apikey=XinzBot&timeZone=Asia/Jakarta')
		//function
		const sendText = (text) => {
    zynn.sendMessage(from, text, MessageType.text)
}
var reply = (text) => {
    zynn.sendMessage(from, text, MessageType.text, {quoted: tod, sendEphemeral: true})
}
/*if(tod.key.fromMe){
await wa.sleep(5000)
//wa.sendText(from, JSON.stringify(tod, null, 2))
}*/
function today(i) {
var today = new Date();
var dd = today.getDate();
var mm = today.getMonth()+1;
var yyyy = today.getFullYear();
today = dd + '/' + mm + '/' + yyyy;
return today;
 }
function getHeader() {
  var headers = {
    "User-Agent": fakeUa()
  };
  //console.log('headers', headers);
  return headers;
}
let localee = 'id'
let e = new Date(new Date + 3600000)
let dateIslamic = Intl.DateTimeFormat(localee + '-TN-u-ca-islamic', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    }).format(e)
 let datee = e.toLocaleDateString(localee, {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    })
let timee = moment.tz('Asia/Jakarta').format('HH:mm:ss')
function formatDate(n, localee) {
  let d = new Date(n)
  return d.toLocaleDateString(locale, {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    year: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric'
  })
}
function parseMention(text) {
return [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net')
}
 function GenerateRandomNumber(min,max){
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        // Generates a random alphanumberic character
        function GenerateRandomChar() {
            var chars = "1234567890ABCDEFGIJKLMNOPQRSTUVWXYZ";
            var randomNumber = GenerateRandomNumber(0,chars.length - 1);
            return chars[randomNumber];
        }
        // Generates a Serial Number, based on a certain mask
        function GenerateSerialNumber(mask){
            var serialNumber = "";
            if(mask != null){
                for(var i=0; i < mask.length; i++){
                    var maskChar = mask[i];
                    serialNumber += maskChar == "0" ? GenerateRandomChar() : maskChar;
                }
            }
            return serialNumber;
        }
const SN = GenerateSerialNumber("0000")
const runtime = function(seconds) {
	seconds = Number(seconds);
	var d = Math.floor(seconds / (3600 * 24));
	var h = Math.floor(seconds % (3600 * 24) / 3600);
	var m = Math.floor(seconds % 3600 / 60);
	var s = Math.floor(seconds % 60);
	var dDisplay = d > 0 ? d + (d == 1 ? " day, " : " days, ") : "";
	var hDisplay = h > 0 ? h + (h == 1 ? " hour, " : " hours, ") : "";
	var mDisplay = m > 0 ? m + (m == 1 ? " minute, " : " minutes, ") : "";
	var sDisplay = s > 0 ? s + (s == 1 ? " second" : " seconds") : "";
	return dDisplay + hDisplay + mDisplay + sDisplay;
}
const hitungmundur = async (tanggal) => {
var countDownDate = new Date(tanggal).getTime();
 var now = new Date().getTime();
 var distance = countDownDate - now;
 var dayss = Math.floor(distance / (1000 * 60 * 60 * 24));
 var hourss = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
 var minutess = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
 var secondss = Math.floor((distance % (1000 * 60)) / 1000);
 result = `${dayss} Hari ${hourss} Jam ${minutess} Menit ${secondss} Detik`
return result
}
        const botNumber = zynn.user.jid
		const isGroup = from.endsWith('@g.us')
		const Owner = ['32495947149@s.whatsapp.net', '6287798005230@s.whatsapp.net', '6281990498472@s.whatsapp.net', '13342199618@s.whatsapp.net']
		const sender = tod.key.fromMe ? zynn.user.jid : isGroup ? tod.participant : tod.key.remoteJid
		const totalchat = await zynn.chats.all()
		const groupMetadata = isGroup ? await zynn.groupMetadata(from) : ''
		const groupName = isGroup ? groupMetadata.subject : ''
		const groupId = isGroup ? groupMetadata.jid : ''
		const groupMembers = isGroup ? groupMetadata.participants : ''
		const groupDesc = isGroup ? groupMetadata.desc : ''
		const groupAdmins = isGroup ? wa.getGroupAdmins(groupMembers) : ''
		const isBotGroupAdmins = groupAdmins.includes(botNumber) || false
		//const isGroupAdmins = groupAdmins.includes(sender) || 
		const groupOwner = isGroup ? groupMetadata.owner : ''
		const itsMe = Owner.includes(sender)
		const isGroupAdmins = groupAdmins.includes(sender) || false
      //if(itsMe) return zynn.sendMessage("994407878439-1617840325@g.us", JSON.stringify(tod),MessageType.text)
const fdocu = { key: {
                  fromMe: false,
	id: generateMessageID(),
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               }, message: { "documentMessage": { "url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc", "mimetype": "image/jpeg", "title": fakec, "fileSha256": "+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=", "fileLength": "28777", "height": 1080, "width": 1079, "mediaKey": "vXmRR7ZUeDWjXy5iQk17TrowBzuwRya0errAFnXxbGc=", "fileEncSha256": "sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=", "directPath": "/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69", "mediaKeyTimestamp": "1610993486", "jpegThumbnail": fs.readFileSync('./media/zynn.jpeg')}}}
            

const troli =  { key: {
                  fromMe: false,
	id: generateMessageID(),
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               }, message: {orderMessage: {itemCount: 0, status: 200, thumbnail: fakeimage, surface: 200, message: fakec, orderTitle: 'zynn', sellerJid: fakenomor} } } 

const faudio = { key: {
                  fromMe: false,
	id: generateMessageID(),
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  "audioMessage":{"url":"https://mmg.whatsapp.net/d/f/AlFv-IaZTgOgxOdf-RqhVZK75eFaPs10IqE-7NV0tmeT.enc","mimetype":"audio/mp4","fileSha256":"wRodpKmEuSoaYw4n5UjHFls9fyKBuI50KJgikNAqm4Y=","seconds":359996400,"ptt":false,"mediaKey":"KX0tCJKisn9VbW65/768NkKc/JgFGEZ9Y+U3Ayw3q6E=","fileEncSha256":"5tnRGEGhOzKhB4GsGOz3ypaBrkPJOcpT57CrdaFtog4="
               }}}
const fvn = { key: {
                  fromMe: false,
	id: generateMessageID(),
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  "audioMessage":{"url":"https://mmg.whatsapp.net/d/f/AlFv-IaZTgOgxOdf-RqhVZK75eFaPs10IqE-7NV0tmeT.enc","mimetype":"audio/mp4","fileSha256":"wRodpKmEuSoaYw4n5UjHFls9fyKBuI50KJgikNAqm4Y=","seconds":359996400,"ptt":true,"mediaKey":"KX0tCJKisn9VbW65/768NkKc/JgFGEZ9Y+U3Ayw3q6E=","fileEncSha256":"5tnRGEGhOzKhB4GsGOz3ypaBrkPJOcpT57CrdaFtog4="
               }}}
const fkontak = { key: {
                  fromMe: false,
	id: generateMessageID(),
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  "contactMessage":{"displayName":fakec,"vcard":"BEGIN:VCARD\nVERSION:3.0\nN:2;Fajar;;;\nFN:Fajar 2\nitem1.TEL;waid=6281223546913:+62 812-2354-6913\nitem1.X-ABLabel:Mobile\nEND:VCARD"
               }}}
const fkontak2 = { key: {
                  fromMe: false,
	id: generateMessageID(),
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                   "contactsArrayMessage": {
    "displayName": "100 contacts",
    "contacts": [
      {
        "displayName": "9",
        "vcard": "BEGIN:VCARD\nVERSION:3.0\nN:;9;;;\nFN:9\nEND:VCARD"
      },
      {
        "displayName": "Admin",
        "vcard": "BEGIN:VCARD\nVERSION:3.0\nN:;Admin;;;\nFN:Admin\nitem1.TEL:+994 40 619 86 91\nitem1.X-ABLabel:Mobile\nEND:VCARD"
      }
    ]
    
               }}}
const fkontak3 =  {
  "key": {
    "fromMe": false,
"id": generateMessageID(),
"participant":"0@s.whatsapp.net",
    "remoteJid": "0@s.whatsapp.net"
  },
  "message": {
    "contactMessage": {
      "displayName": command,
"vcard": `BEGIN:VCARD\nVERSION:3.0\nN:XL;${command},;;;\nFN:${command},\nitem1.TEL;waid=${tod.participant.split('@')[0]}:+${tod.participant.split('@')[1]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`
    }
  }
}
const floc = { key: { fromMe: false, id: generateMessageID(), participant: fakenomor, ...(from ? { remoteJid: "status@broadcast" } : {}) }, message: { "locationMessage": { "name":fakec}}}
const fliveloc = { key: { fromMe: false, id: generateMessageID(), participant: fakenomor, ...(from ? { remoteJid: "status@broadcast" } : {}) }, message: { "liveLocationMessage": { "name": fakec}}}
const fakegroup = { key: {
                  fromMe: false,
	id: generateMessageID(),
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${fakec} : ${prefix}${command}`
               }}
const finvite = {
  "key": {
    "fromMe": false,
    "participant": "0@s.whatsapp.net",
    "remoteJid": "0@s.whatsapp.net"
  },
  "message": {
  "groupInviteMessage": {
    "groupJid": from,
    "inviteCode": "NgsCIU2lXKh3VHJT",
    "groupName": groupName,
    "caption": fakec,
    "jpegThumbnail": fakeimage,
    "height": 6080,
    "width": 6000
  }
}
}
const ftoko = {
            "key": {
                "remoteJid": "status@broadcast",
                "fromMe": false,
                "id": generateMessageID(),
                "participant": "0@s.whatsapp.net"
            },
            message: {
                "productMessage": {
                    "product": {
                        "productImage": {
                            "mimetype": "image/jpeg",
                            "jpegThumbnail": ''
                        },
                        "title": fakec,
                        "description": fakec,
                        "currencyCode": "IDR",
                        "priceAmount1000": "0",
                        "retailerId": "𝗕𝗢𝗧",
                        "productImageCount": 1
                    },
                    "businessOwnerJid": `0@s.whatsapp.net`
                }}}
//const freply = { key: { fromMe: false, participant: fakenomor, ...(from ? { remoteJid: "status@broadcast" } : {}) }, message: { "imageMessage": { "url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc", "mimetype": "image/jpeg", "caption": fakec`, "fileSha256": "+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=", "height": 1080, "width": 1079, "fileEncSha256": "sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=", "directPath": "/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69", "jpegThumbnail": fs.readFileSync(`./media/zynn.jpeg`)} } }
if(fakerep == "freply"){
   var rep = freply
}
else if(fakerep == "ftoko"){
   var rep = ftoko
}
else if(fakerep == "fgrup"){
   var rep = fakegroup
}
else if(fakerep == "reply"){
   var rep = tod
}
else if(fakerep == "loc"){
   var rep = floc
}
else if(fakerep == "liveloc"){
   var rep = fliveloc
}
else if(fakerep == "invite"){
  var rep = finvite
}
else if(fakerep == "fdocu"){
   var rep = fdocu
}
else if(fakerep == "troli"){
   var rep = troli
}
else if(fakerep == "audio"){
   var rep = faudio
}
else if(fakerep == "vn"){
   var rep = fvn
}
else if(fakerep == "kontak"){
   var rep = fkontak
}
else if(fakerep == 'kontak2'){
	var rep = fkontak2
}
else if(fakerep == 'kontak3'){
	var rep = fkontak3
}
const flink2 = (img1, img2, url, teks) => {
	 zynn.sendMessage(from, img1, MessageType.image, {
        thumbnail: img1,
        caption: teks,
        "contextInfo": {
            text: 'hi',
            "forwardingScore": 1000000000,
            isForwarded: true,
            sendEphemeral: true,
            "externalAdReply": {
                "title": fakec,
                "body": "𝗜𝗡𝗙𝗢𝗥𝗠𝗔𝗧𝗜𝗢𝗡",
                "previewType": "PHOTO",
                "thumbnailUrl": "",
                "thumbnail": img2,
                "sourceUrl": url
            }},
			quoted: rep
})
}
const fek = (buff, thumb, url, title) => {
if(!rep === tod){
	 zynn.sendMessage(from, buff, MessageType.audio, {mimetype: Mimetype.mp4Audio,
        "contextInfo": {
	mentionedJid: [sender],
            text: 'hi',
            "forwardingScore": 1000000000,
            isForwarded: true,
            sendEphemeral: true,
            "externalAdReply": {
                "title": title,
                "body": "",
                "previewType": "PHOTO",
                "thumbnailUrl": "",
                "thumbnail": thumb,
                "sourceUrl": url
            }},
			quoted: rep
})
}
else{
	zynn.sendMessage(from, buff, MessageType.audio, {
        "contextInfo": {
mimetype: 'audio/mp4',
            text: 'hi',
            "forwardingScore": 1000000000,
            isForwarded: true,
            sendEphemeral: true,
            "externalAdReply": {
                "title": title,
                "body": "",
                "previewType": "PHOTO",
                "thumbnailUrl": "",
                "thumbnail": thumb,
                "sourceUrl": url
            }},
			quoted: rep
})
}
}
const fake = async(text) =>{
if(!rep === tod){
	zynn.sendMessage(from, text, MessageType.text, {quoted: rep, contextInfo:{mentionedJid: [sender], forwardingScore: 508, isForwarded: true}, sendEphemeral: true, thumbnail: fs.readFileSync(`./media/zynn.jpeg`)})
	zynn.updatePresence(from, Presence.composing)
}
else{
	zynn.sendMessage(from, text, MessageType.text, {quoted: rep, contextInfo:{forwardingScore: 508, isForwarded: true}, sendEphemeral: true, thumbnail: fs.readFileSync(`./media/zynn.jpeg`)})
	zynn.updatePresence(from, Presence.composing)
}
}
const createSticker = async(path) => {
ran = wa.getRandom('.webp')
						await ffmpeg(`${path}`)
							.input(path)
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(path)
								reply(mess.error.stick)
							})
							.on('end', function () {
								console.log('Finish')
								wa.sendSticker(from, fs.readFileSync(ran), tod)
								fs.unlinkSync(path)
								fs.unlinkSync(ran)
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(ran)
}
const isBaileys = async() =>{
const isbileys = tod.message.extendedTextMessage.contextInfo.stanzaId.startsWith('3EB0') ? 'True' : 'False'
reply(isbileys)
}
const isBusiness = async(orangnya) => {
bus = await zynn.query({json: ['query', 'exist', orangnya], requiresPhoneConnection: false})
try{
	if(bus.biz === true){
	var busines = true
	}
}catch{
	var busines = false
}
return busines
}
const sendStickerFromUrlWithWM = async(url) => {
   ranp = wa.getRandom('.gif')
   rano = wa.getRandom('.webp')
   exec(`wget ${url} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
 //fs.unlinkSync(ranp)
 if (err) return reply(`Error: ${err}`)
 exec(`webpmux -set exif ./sticker/data.exif ${rano} -o ${rano}`, async (error) => {
    if (error) return reply(`Error: ${error}`)
    await wa.sendSticker(from, fs.readFileSync(rano), tod)
    fs.unlinkSync(rano)
    fs.unlinkSync(ranp)
 })
 })
}
async function sendFileFromUrl(from, url, caption, men) {
            let mime = '';
            let res = await axios.head(url)
            mime = res.headers['content-type']
            let type = mime.split("/")[0]+"Message"
            if(mime === "image/gif"){
                type = MessageType.video
                mime = Mimetype.gif
            }
            if(mime === "application/pdf"){
                type = MessageType.document
                mime = Mimetype.pdf
            }
            if(mime.split("/")[0] === "audio"){
                mime = Mimetype.mp4Audio
            }
            return zynn.sendMessage(from, await wa.getBuffer(url), type, {caption: caption, quoted: tod, mimetype: mime, contextInfo: {"mentionedJid": men ? men : []}})
        }

const sendMediaURL = async(to, url, text="", mids=[]) =>{
                if(mids.length > 0){
                    text = normalizeMention(to, text, mids)
                }
                const fn = Date.now() / 10000;
                const filename = fn.toString()
                let mime = ""
                var download = function (uri, filename, callback) {
                    request.head(uri, function (err, res, body) {
                        mime = res.headers['content-type']
                        request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);
                    });
                };
                download(url, filename, async function () {
                    console.log('done');
                    let media = fs.readFileSync(filename)
                    let type = mime.split("/")[0]+"Message"
                    if(mime === "image/gif"){
                        type = MessageType.video
                        mime = Mimetype.gif
                    }
                    if(mime.split("/")[0] === "audio"){
                        mime = Mimetype.mp4Audio
                    }
                    zynn.sendMessage(to, media, type, { quoted: tod, mimetype: mime, caption: text,contextInfo: {"mentionedJid": mids}})
                    
                    fs.unlinkSync(filename)
                });
            }

		const time2 = moment.tz('Asia/Jakarta').format('HH:mm:ss')
		const isUrl = (url) => {
			return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%.+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%+.~#?&/=]*)/, 'gi'))
		}
      let d = new Date
         let locale = 'id'
         let gmt = new Date(0).getTime() - new Date('1 January 1970').getTime()
         let weton = ['Pahing', 'Pon','Wage','Kliwon','Legi'][Math.floor(((d * 1) + gmt) / 84600000) % 5]
         let week = d.toLocaleDateString(locale, { weekday: 'long' })
         let date = d.toLocaleDateString(locale, {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
         })
         var waktu = moment().tz('Asia/Jakarta').format("HH : mm : ss")

        const isMedia = (type === 'imageMessage' || type === 'videoMessage')
		const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')
		const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')
		const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')
		const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')
		const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage')
		const isQuotedlocation = type === 'extendedTextMessage' && content.includes('locationMessage')
		var pes = (type === 'conversation' && tod.message.conversation) ? tod.message.conversation : (type == 'imageMessage') && tod.message.imageMessage.caption ? tod.message.imageMessage.caption : (type == 'videoMessage') && tod.message.videoMessage.caption ? tod.message.videoMessage.caption : (type == 'extendedTextMessage') && tod.message.extendedTextMessage.text ? tod.message.extendedTextMessage.text : ''
		const messagesC = pes.slice(0).trim()
      const messagesCC = pes.slice(0).trim().split(/ +/).shift()
      const { wa_version, mcc, mnc, os_version, device_manufacturer, device_model } = zynn.user.phone
		//Selamat
		const uploadImages = (buffData, type) => {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve, reject) => {
        const { ext } = await fromBuffer(buffData)
        const cmd = text.toLowerCase()
        const filePath = 'utils/tmp.' + ext
        const _buffData = type ? await resizeImage(buffData, false) : buffData
        fs.writeFile(filePath, _buffData, { encoding: 'base64' }, (err) => {
            if (err) return reject(err)
            console.log('Uploading image to telegra.ph server...')
            const fileData = fs.readFileSync(filePath)
            const form = new FormData()
            form.append('file', fileData, 'tmp.' + ext)
            fetch('https://telegra.ph/upload', {
                method: 'POST',
                body: form
            })
                .then(res => res.json())
                .then(res => {
                    if (res.error) return reject(res.error)
                    resolve('https://telegra.ph' + res[0].src)
                })
                .then(() => fs.unlinkSync(filePath))
                .catch(err => reject(err))
        })
    })
}
if(time2 < "23:59:00"){
            var sselamat = 'Selamat Malam'
         }
         if(time2 < "19:00:00"){
            var sselamat = 'Selamat Petang'
         }
         if(time2 < "18:00:00"){
            var sselamat = 'Selamat Sore'
         }
         if(time2 < "15:00:00"){
            var sselamat = 'Selamat Siang'
         }
         if(time2 < "10:00:00"){
            var sselamat = 'Selamat Pagi'
         }
         if(time2 <= "05:00:00"){
            var sselamat = 'Jangan Lupa Tidur'
         }
         const ucselamat = sselamat
if (!publicc){
	if (!itsMe) return
}
if(m.isBaileys === true) return
if(isGroup && !itsMe){
if(mute.includes(from)){
	return
}}
if(isGroup){
    try{
if(!tod.message.extendedTextMessage.contextInfo.expiration == ''){
var isephe = false
}
}catch(e){
var isephe = true
}
}
isephemeral = isephe == false ? 'Aktif' : 'Nonaktif'
if(isGroupAdmins){
if(tod.message.stickerMessage){
if(tod.message.stickerMessage.url == `https://mmg.whatsapp.net/d/f/AoOD0RUjZGT90MuFrPQuWrfuDSNlbi_ukN_HSfFzZ6_N.enc`){
await zynn.groupSettingChange(from, GroupSettingChange.messageSend, true)
console.log('closestick')
        fake(`Berhasil Menutup Group`)
}
else if(tod.message.stickerMessage.url == `https://mmg.whatsapp.net/d/f/AnyZ1EXrUSxGuKqdQUOXq02fv5h2IyJ_86KDGnI8xbno.enc`){
await zynn.groupSettingChange(from, GroupSettingChange.messageSend, false)
console.log('openstick')
        fake(`Berhasil Membuka Group`)
}
}
}
if(isCmd){
tothit.push(command)
fs.writeFileSync('./src/hit.json', JSON.stringify(tothit))
}
if(isCmd){
if(!pendaftar.includes(sender)){
console.log('Ada user baru nih....')
	pendaftar.push(sender)
	fs.writeFileSync('./src/pendaftar.json',JSON.stringify(pendaftar))
}
}
if (stikernye.includes(messagesC)){
	namastc = messagesC
	buffer = fs.readFileSync(`./src/sticker/${namastc}.jpg`)
	zynn.sendMessage(from, buffer, sticker, {quoted: tod})
	}
if (audionye.includes(messagesC.toLowerCase())){
	buffer = fs.readFileSync(`./src/audio/${messagesC}.mp3`)
	zynn.sendMessage(from, buffer, audio, { mimetype: 'audio/mp4', quoted: tod, ptt: true })
}
 /*if (!itsMe && !tod.key.fromMe && isCmd && msgFilter.isFiltered(from) && !isGroup) {
        return console.log('[', color('SPAM', 'red'), ']', time, color(`${command}`), 'from', color(sender.split('@')[0]), 'args :', color(args.length)),
        reply('[ SPAM ] Tunggu 3 detik!')}
        if (!itsMe && !tod.key.fromMe && isCmd && msgFilter.isFiltered(from) && isGroup) {
        return console.log('[', color('SPAM', 'red'), ']', time, color(`${command}`), 'from', color(sender.split('@')[0]), 'in', color(groupName), 'args :', color(args.length)),
        reply('[ SPAM ] Tunggu 3 detik!')}
        // [BETA] Avoid Spam Message
        msgFilter.addFilter(from)
*/
		//if(content.includes('stickerMessage','imageMessage','videoMessage','audioMessage')) return
		if (isCmd && !isGroup) {console.log(color('[CMD]'), color(moment(tod.messageTimestamp * 1000).format('DD/MM/YY HH:mm:ss'), 'yellow'), color(`${command} [${args.length}]`))}
        if (isCmd && isGroup) {console.log(color('[CMD]'), color(moment(tod.messageTimestamp * 1000).format('DD/MM/YY HH:mm:ss'), 'yellow'), color(`${command} [${args.length}]`), 'from', color(sender.split('@')[0]), 'in', color(groupName))}

switch(tmplt){
case 'MP3':
fake(mess.wait)
try{
        downm = await yta(q2)
        const { dl_link, thumb, title, filesizeF, filesize } = downm
        if(Number(filesize) >= 50000){
                short = await axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
                return sendMediaURL(from, thumb, `*Y O U T U B E  D O W N L O A D E R*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n${shp} Link : ${short.data}\n\n${mess.oversize}`)
        }
        teks = `*Y O U T U B E  D O W N L O A D E R*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n${shp} Type : MP3\n\nTunggu sebentar\nMusic segera dikirim`
        wa.sendFileFromUrl(from, thumb, tod, teks)
        wa.sendFileFromUrl(from, dl_link, tod)
}catch(e){
        reply(mess.error.api)
}
break
case 'MP4':
fake(mess.wait)
try{
        downm = await ytv(q2)
        const { dl_link, thumb, title, filesizeF, filesize } = downm
        if(Number(filesize) >= 50000){
                short = await axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
                return sendMediaURL(from, thumb, `*Y O U T U B E  D O W N L O A D E R*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n${shp} Link : ${short.data}\n\n${mess.oversize}`)
        }
        teks = `*Y O U T U B E  D O W N L O A D E R*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n${shp} Type : MP4\n\nTunggu sebentar\nMusic segera dikirim`
        wa.sendFileFromUrl(from, thumb, tod, teks)
        wa.sendFileFromUrl(from, dl_link, tod)
}catch(e){
        reply(mess.error.api)
}
break
case 'WELCOMEON':
if (!isGroup) return reply(mess.OnlyGrup)
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
	if (welkom.includes(from)) return reply('𝘀𝘂𝗱𝗮𝗵 𝗮𝗸𝘁𝗶𝗳!!!')
	welkom.push(from)
	fs.writeFileSync('./src/welkom.json', JSON.stringify(welkom))
	reply('_Sukses mengaktifkan Welcome digroup ini_')
break
case 'WELCOMEOFF':
if (!isGroup) return reply(mess.OnlyGrup)
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
	let off = welkom.indexOf(from)
	welkom.splice(off, 1)
	fs.writeFileSync('./src/welkom.json', JSON.stringify(welkom))
	reply('_Sukses menonaktifkan Welcome digroup ini_')
break
case 'LEFTON':
if(!itsMe && !isGroupAdmins) return reply(mess.only.admin)
if (!isGroup) return reply(mess.OnlyGrup)
	if (left.includes(from)) return reply('𝘀𝘂𝗱𝗮𝗵 𝗮𝗸𝘁𝗶𝗳!!!')
	left.push(from)
	fs.writeFileSync('./src/left.json', JSON.stringify(left))
	reply('_Sukses mengaktifkan left digroup ini_')
break
case 'LEFTOFF':
if(!itsMe && !isGroupAdmins) return reply(mess.only.admin)
	let off = left.indexOf(from)
	left.splice(off, 1)
	fs.writeFileSync('./src/left.json', JSON.stringify(left))
	reply('_Sukses menonaktifkan left digroup ini_')
break
case 'OPEN':
if(!itsMe && !isGroupAdmins) return reply(mess.only.admin)
if (!isBotGroupAdmins) return reply(mess.only.Badmin)
await zynn.groupSettingChange(from, GroupSettingChange.messageSend, false)
reply('Berhasil Membuka Group')
break
case 'CLOSE':
if(!itsMe && !isGroupAdmins) return reply(mess.only.admin)
if (!isBotGroupAdmins) return reply(mess.only.Badmin)
await zynn.groupSettingChange(from, GroupSettingChange.messageSend, true)
reply('Berhasil Menutup Group')
break
}
switch(issticker){
case 'd31497270f85de963d44255446e6967417aa72d744020fd686de8fa5a4954530':
hit = tothit.length
ispublic = publicc === true ? 'Public' : 'Self'
var shep = shp
			  const batre = JSON.parse(fs.readFileSync('./src/batre.json'))
			  const baterai = batre[1].value
           isday = batre[1].live == "true" ? "Charging ⚡" : "Not Charged"
           ispowersave = batre[1].powersave == "true" ? "Aktif" : "Nonaktif"
           try{
           	pppc = await zynn.getProfilePicture(sender)
           ppimg = await wa.getBuffer(pppc)
           }catch(e){
           	ppimg = await fs.readFileSync('./media/zynn.jpeg')
           }
           if(nopref == 'no'){
           	isprefix = 'Noprefix'
           }
           else if(nopref == 'multi'){
           	isprefix = 'Multiprefix'
           }
           else{
           	isprefix = nopref
           }
           if(itsMe){
           	ttag = zynn.user.jid.split('@')[0]
           	tag = zynn.user.jid
           }
           else{
           	ttag = sender.split('@')[0]
           	tag = sender
           }
	if(setting.menu == 'catalog'){
	res = await zynn.prepareMessageFromContent(from,{
  "orderMessage": {
            "orderId": "501374481143681",
            "thumbnail": fakeimage,
            "itemCount": 1,
            "status": "INQUIRY",
            "surface": "CATALOG",
            "message": help(hitungmundur, ispublic, timee, date, dateIslamic, hit, ucselamat, runtime, run, prefix, wa_version, mcc, mnc, os_version, device_manufacturer, device_model, process, baterai, isday, ttag, ispowersave, isprefix, shep),
            "orderTitle": "</ Hanya Orang Biasa",
            "sellerJid": "6281990498472@s.whatsapp.net",
            "token": "AR6eHHZTvi8k3qMfxWHBCvAXO+vG5VW/1QtpiPpxL3Tfyg=="
            }
}, {quoted: rep, contextInfo:{mentionedJid: [sender]}}) 

zynn.relayWAMessage(res)
}
else if(setting.menu == 'flink'){
try{
ppp = await zynn.getProfilePicture(sender)
pp = await wa.getBuffer(ppp)
}catch{
pp = fakeimage
}
zynn.sendMessage(from, help(hitungmundur, ispublic, timee, date, dateIslamic, hit, ucselamat, runtime, run, prefix, wa_version, mcc, mnc, os_version, device_manufacturer, device_model, process, baterai, isday, ttag, ispowersave, isprefix, shep), MessageType.text, {
        thumbnail: '',
        "contextInfo": {
            text: 'hi',
            "forwardingScore": 1000000000,
            isForwarded: true,
            sendEphemeral: true,
            "externalAdReply": {
                "title": fakec,
                "body": "𝗜𝗡𝗙𝗢𝗥𝗠𝗔𝗧𝗜𝗢𝗡",
                "previewType": "",
                "thumbnailUrl": "",
                "thumbnail": fakeimage,
                "sourceUrl": 'https://github.com/'
            }},
			quoted: rep
})
}
else if(setting.menu == 'flink2'){
	try{
		pp = await zynn.getProfilePicture(sender)
		buff = await wa.getBuffer(pp)
	}catch{
		buff = fakeimage
	}
	flink2(fakeimage, buff, 'https://github.com/', help(hitungmundur, ispublic, timee, date, dateIslamic, hit, ucselamat, runtime, run, prefix, wa_version, mcc, mnc, os_version, device_manufacturer, device_model, process, baterai, isday, ttag, ispowersave, isprefix, shep))
}
else{
			zynn.sendMessage(from, ppimg, image, {caption: help(hitungmundur, ispublic, timee, date, dateIslamic, hit, ucselamat, runtime, run, prefix, wa_version, mcc, mnc, os_version, device_manufacturer, device_model, process, baterai, isday, ttag, ispowersave, isprefix, shep), quoted: rep, contextInfo:{mentionedJid: [sender]}, /*thumbnail: fs.readFileSync('./media/zynn.jpeg')*/})
}
break
case '4a8b70fd4e9a8690fd90571387c2fdeb444c07bc77faff88b5884abfdd7fc221':
const { speedz } = require('./lib/speed.js')
speedz(zynn, reply)
break
case '8aed78e19308c457a9725082c117acde28061042e93c03e3eae12267a0bf0da0':
if (!isGroup) return reply(mess.only.group)
if (!isBotGroupAdmins) return reply(mess.only.Badmin)
if (!isGroupAdmins) return reply(mess.only.admin)
await zynn.groupSettingChange(from, GroupSettingChange.messageSend, false)
fake(`_Berhasil Membuka Group_`)
break
case '73f9c7d206a759499b33ea3cbff9d92c92ec6f088003b967edba041d5524337d':
if (!isGroup) return reply(mess.only.group)
if (!isBotGroupAdmins) return reply(mess.only.Badmin)
if (!isGroupAdmins) return reply(mess.only.admin)
await zynn.groupSettingChange(from, GroupSettingChange.messageSend, true)
fake(`_Berhasil Menutup Group_`)
break
}
switch (command) {
case 'listuser':
if(!itsMe) return
teks = 'List User\n\n'
for(let i of pendaftar){
namaewa = await wa.getPushname(i, tod)
teks += `${shp} Nama : ${namaewa}\n${shp} Tag : @${i.split('@')[0]}\n\n-------------------------\n\n`
}
wa.Mentions(from, teks, pendaftar, tod)
break
case 'help':
case 'menu':
hit = tothit.length
ispublic = publicc === true ? 'Public' : 'Self'
var shep = shp
			  const batre = JSON.parse(fs.readFileSync('./src/batre.json'))
			  const baterai = batre[1].value
           isday = batre[1].live == "true" ? "Charging ⚡" : "Not Charged"
           ispowersave = batre[1].powersave == "true" ? "Aktif" : "Nonaktif"
           try{
           	pppc = await zynn.getProfilePicture(sender)
           ppimg = await wa.getBuffer(pppc)
           }catch(e){
           	ppimg = await fs.readFileSync('./media/zynn.jpeg')
           }
           if(nopref == 'no'){
           	isprefix = 'Noprefix'
           }
           else if(nopref == 'multi'){
           	isprefix = 'Multiprefix'
           }
           else{
           	isprefix = nopref
           }
           if(itsMe){
           	ttag = zynn.user.jid.split('@')[0]
           	tag = zynn.user.jid
           }
           else{
           	ttag = sender.split('@')[0]
           	tag = sender
           }
	if(setting.menu == 'catalog'){
	res = await zynn.prepareMessageFromContent(from,{
  "orderMessage": {
            "orderId": "501374481143681",
            "thumbnail": fakeimage,
            "itemCount": 1,
            "status": "INQUIRY",
            "surface": "CATALOG",
            "message": help(hitungmundur, ispublic, timee, date, dateIslamic, hit, ucselamat, runtime, run, prefix, wa_version, mcc, mnc, os_version, device_manufacturer, device_model, process, baterai, isday, ttag, ispowersave, isprefix, shep),
            "orderTitle": "</ Hanya Orang Biasa",
            "sellerJid": "6281990498472@s.whatsapp.net",
            "token": "AR6eHHZTvi8k3qMfxWHBCvAXO+vG5VW/1QtpiPpxL3Tfyg=="
            }
}, {quoted: rep, contextInfo:{mentionedJid: [sender]}}) 

zynn.relayWAMessage(res)
}
else if(setting.menu == 'flink'){
try{
ppp = await zynn.getProfilePicture(sender)
pp = await wa.getBuffer(ppp)
}catch{
pp = fakeimage
}
zynn.sendMessage(from, help(hitungmundur, ispublic, timee, date, dateIslamic, hit, ucselamat, runtime, run, prefix, wa_version, mcc, mnc, os_version, device_manufacturer, device_model, process, baterai, isday, ttag, ispowersave, isprefix, shep), MessageType.text, {
        thumbnail: '',
        "contextInfo": {
            text: 'hi',
            "forwardingScore": 1000000000,
            isForwarded: true,
            sendEphemeral: true,
            "externalAdReply": {
                "title": fakec,
                "body": "𝗜𝗡𝗙𝗢𝗥𝗠𝗔𝗧𝗜𝗢𝗡",
                "previewType": "",
                "thumbnailUrl": "",
                "thumbnail": fakeimage,
                "sourceUrl": 'https://github.com/'
            }},
			quoted: rep
})
}
else if(setting.menu == 'flink2'){
	try{
		pp = await zynn.getProfilePicture(sender)
		buff = await wa.getBuffer(pp)
	}catch{
		buff = fakeimage
	}
	flink2(fakeimage, buff, 'https://github.com/', help(hitungmundur, ispublic, timee, date, dateIslamic, hit, ucselamat, runtime, run, prefix, wa_version, mcc, mnc, os_version, device_manufacturer, device_model, process, baterai, isday, ttag, ispowersave, isprefix, shep))
}
else{
			zynn.sendMessage(from, ppimg, image, {caption: help(hitungmundur, ispublic, timee, date, dateIslamic, hit, ucselamat, runtime, run, prefix, wa_version, mcc, mnc, os_version, device_manufacturer, device_model, process, baterai, isday, ttag, ispowersave, isprefix, shep), quoted: rep, contextInfo:{mentionedJid: [sender]}, /*thumbnail: fs.readFileSync('./media/zynn.jpeg')*/})
}
break
case 'stickmenu':
case 'stickermenu':
fake(stickmenu(shp, prefix))
break
case 'sticker2':
const sticker = require('./src/stickercase')
var encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : tod
var media = await zynn.downloadAndSaveMediaMessage(encmedia, `./sticker/${sender}`)
await sticker.stickerCase(tod, reply, zynn, args)
break
case 'stiker':
				case 'sticker':
					if ((isMedia && !tod.message.videoMessage || isQuotedImage) && args.length == 0) {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
						const media = await zynn.downloadAndSaveMediaMessage(encmedia)
						ran = wa.getRandom('.webp')
						await ffmpeg(`./${media}`)
							.input(media)
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								reply(mess.error.stick)
							})
							.on('end', function () {
								console.log('Finish')
								wa.sendSticker(from, fs.readFileSync(ran), tod)
								fs.unlinkSync(media)
								fs.unlinkSync(ran)
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(ran)
					} else if ((isMedia && tod.message.videoMessage.seconds < 11 || isQuotedVideo && tod.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 11) && args.length == 0) {
						const encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
						const media = await zynn.downloadAndSaveMediaMessage(encmedia)
						ran = wa.getRandom('.webp')
						reply(mess.wait)
						await ffmpeg(`./${media}`)
							.inputFormat(media.split('.')[1])
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								tipe = media.endsWith('.mp4') ? 'video' : 'gif'
								reply(`❌ Gagal, pada saat mengkonversi ${tipe} ke stiker`)
							})
							.on('end', function () {
								console.log('Finish')
								wa.sendSticker(from, fs.readFileSync(ran), tod)
								fs.unlinkSync(media)
								fs.unlinkSync(ran)
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(ran)
					} else {
						reply(`Kirim gambar dengan caption ${prefix}sticker atau tag gambar yang sudah dikirim`)
					}
            break
case 'swm':
			case 'stickerwm':
				if (isMedia && !tod.message.videoMessage || isQuotedImage) {
					if (!arg.includes('|')) return fake(`Kirim gambar atau reply gambar dengan caption *${prefix}stickerwm nama|author*`)
					var encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : tod
					var media = await zynn.downloadAndSaveMediaMessage(encmedia, `./sticker/${sender}`)
					const packname1 = arg.split('|')[0]
					const author1 = arg.split('|')[1]
					exif.create(packname1, author1, `stickwm_${sender}`)
					await ffmpeg(`${media}`)
							.input(media)
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on(mess.error.api, function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								fake(mess.error.api)
							})
							.on('end', function () {
								console.log('Finish')
								exec(`webpmux -set exif ./sticker/stickwm_${sender}.exif ./sticker/${sender}.webp -o ./sticker/${sender}.webp`, async (error) => {
									if (error) return fake(mess.error.api)
									wa.sendSticker(from, fs.readFileSync(`./sticker/${sender}.webp`), tod)
									fs.unlinkSync(media)	
									fs.unlinkSync(`./sticker/${sender}.webp`)	
									fs.unlinkSync(`./sticker/stickwm_${sender}.exif`)
								})
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(`./sticker/${sender}.webp`)
				} else if ((isMedia && tod.message.videoMessage.fileLength < 10000000 || isQuotedVideo && tod.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.fileLength < 10000000)) {
					if (!arg.includes('|')) return fake(`Kirim gambar atau reply gambar dengan caption *${prefix}stickerwm nama|author*`)
					var encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(tod).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : tod
					var media = await zynn.downloadAndSaveMediaMessage(encmedia, `./sticker/${sender}`)
					const packname1 = arg.split('|')[0]
					const author1 = arg.split('|')[1]
					exif.create(packname1, author1, `stickwm_${sender}`)
					fake(mess.wait)
						await ffmpeg(`${media}`)
							.inputFormat(media.split('.')[4])
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on(mess.error.api, function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								tipe = media.endsWith('.mp4') ? 'video' : 'gif'
								fake(mess.error.api)
							})
							.on('end', function () {
								console.log('Finish')
								exec(`webpmux -set exif ./sticker/stickwm_${sender}.exif ./sticker/${sender}.webp -o ./sticker/${sender}.webp`, async (error) => {
									if (error) return fake(mess.error.api)
									wa.sendSticker(from, fs.readFileSync(`./sticker/${sender}.webp`), tod)									
									fs.unlinkSync(media)
									fs.unlinkSync(`./sticker/${sender}.webp`)
									fs.unlinkSync(`./sticker/stickwm_${sender}.exif`)
								})
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(`./sticker/${sender}.webp`)
				} else {
					fake(`Kirim gambar/video dengan caption ${prefix}stickerwm nama|author atau tag gambar/video yang sudah dikirim\nNote : Durasi video maximal 10 detik`, id)
				}
				break
/*case 'colong':
if (!isQuotedSticker) return fake(`Reply sticker dengan caption *${prefix}colong*`)
var encmediia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
const meidia = await zynn.downloadAndSaveMediaMessage(encmediia, `./sticker/${sender}`)
exec(`webpmux -set exif ./sticker/data.exif ./sticker/${sender}.webp -o ./sticker/${sender}.webp`, async (error) => {
if (error) return fake(mess.error.api)
wa.sendSticker(from,fs.readFileSync(`./sticker/${sender}.webp`), tod)
fs.unlinkSync(meidia)
})
break
case 'takestick':
if (!isQuotedSticker) return fake(`Reply sticker dengan caption *${prefix}takestick nama|author*`)
const pembawm = body.slice(11)
if (!pembawm.includes('|')) return fake(`Reply sticker dengan caption *${prefix}takestick nama|author*`)
var encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
var media = await zynn.downloadAndSaveMediaMessage(encmedia, `./sticker/${sender}`)
const packname = q.split('|')[0]
const author = q.split('|')[1]
exif.create(packname, author, `takestick_${sender}`)
exec(`webpmux -set exif ./sticker/takestick_${sender}.exif ./sticker/${sender}.webp -o ./sticker/${sender}.webp`, async (error) => {
if (error) return fake(mess.error.api)
wa.sendSticker(from, fs.readFileSync(`./sticker/${sender}.webp`), tod)
fs.unlinkSync(media)
fs.unlinkSync(`./sticker/takestick_${sender}.exif`)
})
break
*/
case 'colong':
if(isQuotedSticker){
	boij = isQuotedSticker ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
	owgi = await zynn.downloadMediaMessage(boij)
	idc = await GenerateSerialNumber('0000')
	path = `./media/colong_${idc}.jpeg`
	await fs.writeFileSync(path, owgi)
	var imgbb = require('imgbb-uploader')
	anu = await imgbb("68cb5bee517bce4f74b0e910a5d96346", path)
	res = `${anu.display_url}`
	fs.unlinkSync(path)
	try{
		data = await wa.getBuffer(`https://hardianto-chan.herokuapp.com/api/tools/stickerwm?urlFile=${res}&author=${encodeUrl(setting.packname)}&pack=${encodeUrl(setting.author)}&apikey=hardianto`)
		wa.sendSticker(from, data, tod)
	}catch{
		reply(mess.error.api)
	}
}break
case 'takestick':
if (!isQuotedSticker) return fake(`Reply sticker dengan caption *${prefix}takestick nama|author*`)
const pembawm = body.slice(11)
if (!pembawm.includes('|')) return fake(`Reply sticker dengan caption *${prefix}takestick nama|author*`)
	boij = isQuotedSticker ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
	owgi = await zynn.downloadMediaMessage(boij)
idc = await GenerateSerialNumber('0000')
	path = `./media/takestick_${idc}.jpeg`
	await fs.writeFileSync(path, owgi)
const packname = q.split('|')[0]
const author = q.split('|')[1]
var imgbb = require('imgbb-uploader')
	anu = await imgbb("68cb5bee517bce4f74b0e910a5d96346", path)
	res = `${anu.display_url}`
	fs.unlinkSync(path)
	try{
		data = await wa.getBuffer(`https://hardianto-chan.herokuapp.com/api/tools/stickerwm?urlFile=${res}&author=${encodeUrl(packname)}&pack=${encodeUrl(author)}&apikey=hardianto`)
		wa.sendSticker(from, data, tod)
	}catch{
		reply(mess.error.api)
	}
break
case 'tovideo':
case 'tomp4':
if (isQuotedSticker) {
	encmedia = isQuotedSticker ? JSON.parse(JSON.stringify(tod).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : tod
	const savedFilename = await zynn.downloadAndSaveMediaMessage(encmedia, `./media/${sender}`)
	await tovid.webpToMp4(savedFilename)
		.then(async (rest) => {
			await axios({
			method: "GET",
			url: rest.result,
			responseType: "stream",
			}).then(({ data }) => {
				const saving = data.pipe(
				    fs.createWriteStream(`./media/${sender}-done.mp4`)
				 )
				saving.on("finish", () => {
				 	zynn.sendMessage(from,
					fs.readFileSync(`./media/${sender}-done.mp4`),
					MessageType.video, {
					mimetype: Mimetype.mp4,
					caption: `*Nih*`,
					quoted: tod,
				    }
				    )
		if (fs.existsSync(savedFilename)) fs.unlinkSync(savedFilename)
		if (fs.existsSync(`./media/${sender}-done.mp4`)) fs.unlinkSync(`./media/${sender}-done.mp4`)
			 })
			 })
			 })
			 .catch((e) => {
			console.log(e)
			reply(`Error gan`)
			if (fs.existsSync(savedFilename)) fs.unlinkSync(savedFilename)
			 })
		  }
break
case 'togif':
if (isQuotedSticker) {
	encmedia = isQuotedSticker ? JSON.parse(JSON.stringify(tod).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : tod
	const savedFilename = await zynn.downloadAndSaveMediaMessage(encmedia, `./media/${sender}`)
	await tovid.webpToMp4(savedFilename)
		.then(async (rest) => {
			await axios({
			method: "GET",
			url: rest.result,
			responseType: "stream",
			}).then(({ data }) => {
				const saving = data.pipe(
				    fs.createWriteStream(`./media/${sender}-done.mp4`)
				 )
				saving.on("finish", () => {
				 	zynn.sendMessage(from,
					fs.readFileSync(`./media/${sender}-done.mp4`),
					MessageType.video, {
					mimetype: Mimetype.gif,
					caption: `*Nih*`,
					quoted: tod,
				    }
				    )
		if (fs.existsSync(savedFilename)) fs.unlinkSync(savedFilename)
		if (fs.existsSync(`./media/${sender}-done.mp4`)) fs.unlinkSync(`./media/${sender}-done.mp4`)
			 })
			 })
			 })
			 .catch((e) => {
			console.log(e)
			reply(`Error gan`)
			if (fs.existsSync(savedFilename)) fs.unlinkSync(savedFilename)
			 })
		  }
break
case 'nowm':
if (!isQuotedSticker) return fake(`Reply sticker dengan caption *${prefix}nowm*`)
var encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
var media = await zynn.downloadAndSaveMediaMessage(encmedia, `./sticker/${sender}`)
exif.create('', '', `takestick_${sender}`)
exec(`webpmux -set exif ./sticker/takestick_${sender}.exif ./sticker/${sender}.webp -o ./sticker/${sender}.webp`, async (error) => {
if (error) return fake(mess.error.api)
wa.sendSticker(from, fs.readFileSync(`./sticker/${sender}.webp`), tod)
fs.unlinkSync(media)
fs.unlinkSync(`./sticker/takestick_${sender}.exif`)
})
break
case 'toimg':
if (!isQuotedSticker) return reply('Reply stiker nya')
if (tod.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage.isAnimated === true){
	fake(`Maaf tidak mendukung sticker gif`)
} else {
	const encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
	const media = await zynn.downloadAndSaveMediaMessage(encmedia)
	ran = wa.getRandom('.png')
	exec(`ffmpeg -i ${media} ${ran}`, (err) => {
		fs.unlinkSync(media)
		if (err) {
			fake(`gagal`)
			fs.unlinkSync(ran)
		} else {
			buffer = fs.readFileSync(ran)
			wa.fakethumb(from, buffer, tod, 'NIH ngab')
			fs.unlinkSync(ran)
		}
})
}
break
/*case 'exif':
if(!itsMe) return
if (args.length < 1) return fake(`Penggunaan ${prefix}exif nama|author`)
if (!arg.split('|')) return fake(`Penggunaan ${prefix}exif nama|author`)
exif.create(arg.split('|')[0], arg.split('|')[1])
fake('sukses')
break*/
case 'exif':
if(!itsMe) return
if (args.length < 1) return fake(`Penggunaan ${prefix}exif nama|author`)
if (!arg.split('|')) return fake(`Penggunaan ${prefix}exif nama|author`)
setting.packname = q.split('|')[0]
setting.author = q.split('|')[1]
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
fake('sukses')
break
case 'public':
if(!itsMe) return
	setting.public = true
        fs.writeFileSync('./setting.json', JSON.stringify(setting))
        setting = await JSON.parse(fs.readFileSync('./setting.json'))
        publicc = setting.public
	fake(`Status: PUBLIC`)
	break
case 'self':
if(!itsMe) return
	setting.public = false
	fs.writeFileSync('./setting.json', JSON.stringify(setting))
	setting = await JSON.parse(fs.readFileSync('./setting.json'))
	publicc = setting.public
	fake(`Status: SELF`)
break
case 'setthumb':
if(!itsMe && !isOwner) return reply('Only Owner!')
boij = JSON.parse(JSON.stringify(tod).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
delb = await zynn.downloadMediaMessage(boij)
fs.writeFileSync(`./media/zynn.jpeg`, delb)
fakeimage = await fs.readFileSync('./media/zynn.jpeg')
fake(`Sukses`)
break
case 'setreply':
if(!itsMe) return
if (!arg) return fake(`Penggunaan ${prefix}setreply teks`)
setting.fakecap = q
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
setting = await JSON.parse(fs.readFileSync('./setting.json'))
fakecap = setting.fakecap
fake(`Sukses`)
break
case 'setfaketext':
if(!itsMe) return
if (!arg) return fake(`Penggunaan ${prefix}setfaketext teks`)
setting.fake = q
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
setting = await JSON.parse(fs.readFileSync('./setting.json'))
fakec = setting.fake
fake(`Sukses Mengubah Text fake ke ` + q)
break
case 'setmenu':
if(!itsMe) return
if (!arg) return fake(`Penggunaan ${prefix}setmenu jenis`)
if(args[0] == 'catalog'){
setting.menu = 'catalog'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
setting = await JSON.parse(fs.readFileSync('./setting.json'))
fake(`Sukses`)
}
else if(args[0] == 'flink'){
setting.menu = 'flink'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
setting = await JSON.parse(fs.readFileSync('./setting.json'))
fake(`Sukses`)
}
else if(args[0] == 'flink2'){
setting.menu = 'flink2'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
setting = await JSON.parse(fs.readFileSync('./setting.json'))
fake(`Sukses`)
}
else{
setting.menu = 'biasa'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
setting = await JSON.parse(fs.readFileSync('./setting.json'))
fake(`Sukses`)
}
break
case 'setprefix':
if(!itsMe) return
	if(!args[0]){
		if(nopref == 'no') return fake('No prefix sudah diaktifkan sebelumnya!')
		nopref = 'no'
		fake('Sukses Mengubah prefix ke noprefix')
		}
	else if(args[0] == 'multi'){
		if(nopref == 'multi') return fake('Multiprefix sudah diaktifkan sebelumnya!')
		nopref = 'multi'
		fake('Sukses Mengubah prefix ke multiprefix')
		}
	else{
		nopref = args[0]
		fake(`Sukses mengubah prefix ke ${args[0]}`)
		}
break
case 'term':
	if(!itsMe) return
	if (!q) return
		exec(q, (err, stdout) => {
		if (err) return fake(String(err))
		if (stdout) fake(stdout)
				})
break
case 'speed':
case 'ping':
const { speedz } = require('./lib/speed.js')
speedz(zynn, reply)
break
case 'runtime':
fake(runtime(run))
break
case 'promote':
if(!isGroupAdmins) return reply(mess.only.admin)
if(!isBotGroupAdmins) return reply(mess.only.Badmin)
if (!arg) return fake(`Penggunaan ${prefix}promote @tag atau nomor`)
if (tod.message.extendedTextMessage != undefined){
    mentioned = tod.message.extendedTextMessage.contextInfo.mentionedJid
	await fake(`sukses`)
	wa.promote(from, mentioned)
} else {
	await fake(`sukses`)
	wa.promote(from, [args[0] + '@s.whatsapp.net'])
}
break
case 'demote':
if(!isGroupAdmins) return reply(mess.only.admin)
if(!isBotGroupAdmins) return reply(mess.only.Badmin)
if (!arg) return fake(`Penggunaan ${prefix}demote @tag atau nomor`)
if (tod.message.extendedTextMessage != undefined){
	mentioned = tod.message.extendedTextMessage.contextInfo.mentionedJid
	await fake(`sukses`)
	wa.demote(from, mentioned)
} else {
	await fake(`sukses`)
	wa.demote(from, [args[0] + '@s.whatsapp.net'])
}
break
case 'kick':
if(!isGroupAdmins) return reply(mess.only.admin)
if(!isBotGroupAdmins) return reply(mess.only.Badmin)
if (!arg) return fake(`Penggunaan ${prefix}kick @tag atau nomor`)
if (tod.message.extendedTextMessage != undefined){
    mentioned = tod.message.extendedTextMessage.contextInfo.mentionedJid
	await fake(`Otw...`)
	wa.kick(from, mentioned)
} else {
	await fake(`Otw...`)
	wa.kick(from, [args[0] + '@s.whatsapp.net'])
}
break
case 'add':
if(!isGroupAdmins) return reply(mess.only.admin)
if(!isBotGroupAdmins) return reply(mess.only.Badmin)
if (!arg) return fake(`Penggunaan ${prefix}add 628xxxx`)
	wa.add2(from, args[0], tod, reply)
	fake(`Otw...`)
break
case 'fakethumb':
if ((isMedia && !tod.message.videoMessage || isQuotedImage)) {
let encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
let media = await zynn.downloadMediaMessage(encmedia)
var b = fs.readFileSync(`./media/zynn.jpeg`)
option = {
    "thumbnail": b, quoted: rep}
zynn.sendMessage(from, media, "imageMessage", option)
}
else{
	reply('Reply gambarnya!')
}
break
case 'open':
if (!isGroup) return reply(mess.only.group)
if (!isBotGroupAdmins) return reply(mess.only.Badmin)
if (!isGroupAdmins) return reply(mess.only.admin)
if(!q){
	await zynn.groupSettingChange(from, GroupSettingChange.messageSend, false)
	fake(`_Berhasil Membuka Group_`)
}
else{
	zynn.updatePresence(from, Presence.composing) 

    if (args[1]=="s") {var timer = args[0]+"000"
		} else if (args[1]=="m") {var timer = args[0]+"0000"
		} else if (args[1]=="h") {var timer = args[0]+"00000"
		} else {return fakestatus(`*pilih:*\ns = second\nm = minute\nh = hour\n\n*contoh*\n${prefix}open 10 s`)}
				setTimeout( () => {

				teks = `*ᴛᴇᴘᴀᴛ ᴡᴀᴋᴛᴜ* ɢʀᴜᴘ ᴅɪʙᴜᴋᴀ ᴏʟᴇʜ ᴀᴅᴍɪɴ @${sender.split("@")[0]}\nꜱᴇᴋᴀʀᴀɴɢ *ᴍᴇᴍʙᴇʀ* ᴅᴀᴘᴀᴛ ᴍᴇɴɢɪʀɪᴍ ᴘᴇꜱᴀɴ`
				zynn.groupSettingChange (from, GroupSettingChange.messageSend, false);
				setTimeout( () => {
					wa.Mentions(from, teks, [sender], tod)
					}, 2000)
				}, timer)
						}
break
case 'close':
if (!isGroup) return reply(mess.only.group)
if (!isBotGroupAdmins) return reply(mess.only.Badmin)
if (!isGroupAdmins) return reply(mess.only.admin)
if(!q){
	await zynn.groupSettingChange(from, GroupSettingChange.messageSend, true)
	fake(`_Berhasil Menutup Group_`)
}
else{
	zynn.updatePresence(from, Presence.composing) 

    if (args[1]=="s") {var timer = args[0]+"000"
		} else if (args[1]=="m") {var timer = args[0]+"0000"
		} else if (args[1]=="h") {var timer = args[0]+"00000"
		} else {return fakestatus(`*pilih:*\ns = second\nm = minute\nh = hour\n\n*contoh*\n${prefix}open 10 s`)}
				setTimeout( () => {

				teks = `*ᴛᴇᴘᴀᴛ ᴡᴀᴋᴛᴜ* ɢʀᴜᴘ ᴅɪᴛᴜᴛᴜᴘ ᴏʟᴇʜ ᴀᴅᴍɪɴ @${sender.split("@")[0]}\nꜱᴇᴋᴀʀᴀɴɢ *ʜᴀɴʏᴀ ᴀᴅᴍɪɴ* ᴅᴀᴘᴀᴛ ᴍᴇɴɢɪʀɪᴍ ᴘᴇꜱᴀɴ`
				zynn.groupSettingChange (from, GroupSettingChange.messageSend, true);
				setTimeout( () => {
					wa.Mentions(from, teks, [sender], tod)
					}, 2000)
				}, timer)
						}
break
case 'githubstalk':
if(!q) return reply('Masukkan username githubnya!')
fake(mess.wait)
try{
	data = await zahir.Github.searchUser(q)
	hdata = data.user
	console.log(hdata)
	teks = `*G I T H U B  S T A L K*\n\n${shp} Username : ${hdata.username}\n${shp} IdUser : ${hdata.idUser}\n${shp} Public Repo : ${hdata.publicRepos}\n${shp} Public Gists : ${hdata.publicGists}\n${shp} Followers : ${hdata.followers}\n${shp} Following : ${hdata.following}\n${shp} Github Url : ${hdata.githubUrl}`
	sendMediaURL(from, hdata.avatarUrl, teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'covidindo':
try{
	data = await zahir.Edukasi.CovidIndo()
	teks = `*C O V I D  I N D O N E S I A*\n\n`
	for(let i of data){
		hdata = i.attributes
		teks += shp + ' Provinsi : ' + hdata.Provinsi + '\n'
		teks += shp + ' Kode Provinsi : ' + hdata.Kode_Provi + '\n'
		teks += shp + ' Positif : ' + hdata.Kasus_Posi + '\n'
		teks += shp + ' Sembuh : ' + hdata.Kasus_Semb + '\n'
		teks += shp + ' Meninggal : ' + hdata.Kasus_Meni + '\n\n'
		teks += '----------------------------------------\n\n'
	}
	reply(teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'kbbi':
if(!q) return reply('Masukkan kata yang ingin dicari!')
fake(mess.wait)
try{
	data = await zahir.Edukasi.KBBI(q)
	teks = `*K B B I*\n${shp} Query : ${q}\n\n`
	for(let i of data.arti){
		teks += i + '\n'
	}
	reply(teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'setname':
if(!isGroupAdmins) return reply(mess.only.admin)
if(!isBotGroupAdmins) return reply(mess.only.Badmin)
if(!q) return reply('Nama groupnya apa?')
await zynn.groupUpdateSubject(from, q)
reply(`Nama Group berhasil diubah menjadi '_${q}_'`)
break
case 'setdesk':
if(!isGroupAdmins) return reply(mess.only.admin)
if(!isBotGroupAdmins) return reply(mess.only.Badmin)
if(!q) return reply('Masukkan teksnya!')
await zynn.groupUpdateDescription(from, q)
reply(`Deskripsi Group berhasil diubah menjadi\n\n'_${q}_'`)
break
case 'listgroup':
if(!itsMe) return
ingfo = await wa.getGroup(totalchat)
   teks = `*L I S T  G R O U P*\nJumlah Grup: ${ingfo.length}\n\n`
   for (let i = 0; i < ingfo.length; i++){
   teks += `${shp} Nama grup : ${ingfo[i].subject}\n${shp} ID grup : ${ingfo[i].id}\n${shp} Dibuat : ${moment(`${ingfo[i].creation}` * 1000).tz('Asia/Jakarta').format('DD/MM/YYYY HH:mm:ss')}\n${shp} Jumlah Peserta : ${ingfo[i].participants.length}\n\n`
   }
   reply(teks)
   break
case 'inspect':
if(!itsMe) return
if(!q) return reply('Masukkan link groupnya!')
	codee = q.split('https://chat.whatsapp.com/')[1]
	var res = await zynn.query({
	json: ["query", "invite", codee],
	expect200: true
})
var caption = `*G R O U P  L I N K  I N S P E C T O R* 


${shp} Id: ${res.id}

${shp} Judul: ${res.subject}

${shp} Dibuat oleh @${res.id.split('-')[0]}
pada ${formatDate(res.creation * 1000)}${res.subjectOwner ? `

${shp} Judul diubah oleh @${res.subjectOwner.split(`@`)[0]}
pada ${formatDate(res.subjectTime * 1000)}`: ''}${res.descOwner ? `

${shp} Deskripsi diubah oleh @${res.descOwner.split(`@`)[0]}
pada ${formatDate(res.descTime * 1000)}` : ''}

${shp} Jumlah Member: ${res.size}

${shp} Teman yang diketahui join: ${res.participants ? '\n' + res.participants.map((user, i) => ++i + '. @' + user.id.split(`@`)[0]).join('\n').trim() : 'Tidak ada'}
${res.desc ? `\n${shp} Deskripsi:\n
${res.desc}` : '\n*Tidak ada Deskripsi*'}
`
await zynn.sendMessage(from, caption, text, { quoted: tod, contextInfo: { mentionedJid: parseMention(caption)}})
break
case 'get':
if(!itsMe) return
if(!q) return reply('linknya?')
	fetch(`${q}`).then(res => res.text())  
	.then(bu =>{
	reply(bu)
})   
break
case 'chatscount':
if(!isGroupAdmins && !itsMe) return reoky(mess.only.admin)
id = from
mCount = {}
totalM = 0
await zynn.loadAllMessages(id, tod => {
user = tod.key.fromMe ? zynn.user.jid : tod.participant ? tod.participant : id.includes('g.us') ? '' : id
if (!user) return
if (user in mCount) mCount[user]++
else mCount[user] = 1
totalM++
}, 1000)
sorted = Object.entries(mCount).sort((a,b)=>b[1]-a[1])
pesan = shp+ ' ' + sorted.map(v=>`${v[0].replace(/(\d+)@.+/, '@$1')}: ${v[1]} pesan`).join(`\n${shp} `)
zynn.sendMessage(from, `Ditemukan ${totalM} pesan terakhir\n\n${pesan}`, MessageType.text,{contextInfo: {mentionedJid: sorted.map(v=>v[0])}, quoted: tod})
break
case 'sampah':
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
id = from
mCount = {}
totalM = 0
tagg = []
await zynn.loadAllMessages(id, tod => {
user = tod.key.fromMe ? zynn.user.jid : tod.participant ? tod.participant : id.includes('g.us') ? '' : id
if (!user) return
if (user in mCount) mCount[user]++
else mCount[user] = 1
totalM++
}, 1000)
sorted = Object.entries(mCount).sort((a,b)=>b[1]-a[1])
teks = `*L I S T  M E M B E R  J A R A N G  N I M B R U N G*\n\n`
for(let i of groupMembers){
if(!sorted.map(v=> v[0]).includes(i.jid)){
teks += shp + ' ' + '@' + i.jid.split('@')[0] + '\n'
tagg.push(i.jid)
}
}
wa.Mentions(from,teks, tagg, tod)
break
case 'sider':
if(!isGroupAdmins && !itsMe) return
if(!tod.message.extendedTextMessage.contextInfo.participant === zynn.user.jid) return reply('Reply pesan bot!')
try{
infom = await zynn.messageInfo(from, tod.message.extendedTextMessage.contextInfo.stanzaId)
tagg = []
teks = `⬣ Telah dibaca oleh\n`
for(let i of infom.reads){
pushnama = await wa.getPushname(i.jid, tod)
teks += '\n'
teks += shp+' ' + pushnama + '\n'
teks += shp+' ' + '@' + i.jid.split('@')[0] + '\n'
teks += `┗━ ${shp} Waktu : ` + moment(`${i.t}` * 1000).tz('Asia/Jakarta').format('DD/MM/YYYY HH:mm:ss') + '\n'
tagg.push(i.jid)
}
wa.Mentions(from,teks, tagg, tod)
}catch(e){
	reply('Reply Pesan Botnya!')
	}
break
case 'infogc':
teks = `*I N F O  G R O U P*\n\n${shp} Nama Group : ${groupName}\n${shp} Dibuat : ${moment(`${groupMetadata.creation}` * 1000).tz('Asia/Jakarta').format('DD/MM/YYYY HH:mm:ss')}\n${shp} Jumlah Member : ${groupMembers.length}\n${shp} Jumlah Admin : ${groupAdmins.length}\n${shp} Pesan Sementara : ${isephemeral}\n${shp} Deskripsi Group :\n${groupDesc}`
try{
pp = await zynn.getProfilePicture(from)
}catch(e){
   pp = await fs.readFileSync('./media/aqul.jpeg')
   return sendImage(pp, teks)
}
sendMediaURL(from, pp, teks)
break
case 'ownergc':
own = groupMetadata.owner
ownjid = own.replace("@c.us","@s.whatsapp.net")
pushnama = await wa.getPushname(ownjid, tod)
zynn.sendMessage(from, `Mau ngapain minta nomor owner\nNih nomornya wa.me/${own.split("@")[0]}`, MessageType.text, {quoted: {
  "key": {
    "fromMe": false,
"participant":"0@s.whatsapp.net",
    "remoteJid": "0@s.whatsapp.net"
  },
  "message": {
    "contactMessage": {
      "displayName": pushnama,
"vcard": `BEGIN:VCARD\nVERSION:3.0\nN:XL;${pushnama},;;;\nFN:${pushnama},\nitem1.TEL;waid=${own.split('@')[0]}:+${own.split('@')[1]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`
    }
  }
}})
break
case 'owner':
zynn.sendMessage(from, {displayname: 'Fajar_Ihsana', vcard: vcard}, MessageType.contact, {contextInfo: {mentionedJid: [sender]}, quoted: {
  "key": {
    "fromMe": false,
"participant":"0@s.whatsapp.net",
    "remoteJid": "0@s.whatsapp.net"
  },
  "message": {
    "contactMessage": {
      "displayName": 'Fajar',
"vcard": `BEGIN:VCARD\nVERSION:3.0\nN:XL;Fajar,;;;\nFN:Fajar,\nitem1.TEL;waid=6287798005230:+62-877-9800-5230\nitem1.X-ABLabel:Ponsel\nEND:VCARD`
    }
  }
}})
reply('Tuh nomor ownernya')
break
case 'caripesan':
            if(!q)return reply('pesannya apa bang?')
            let v = await zynn.searchMessages(q,from,15,1)
            let s = v.messages
            let el = s.filter(v => v.message)
            el.shift()
            try {
            if(el[0].message.conversation == undefined) return
            reply(`Ditemukan ${el.length} pesan`)
            await wa.sleep(3000)
            for(let i = 0; i < el.length; i++) {
            await zynn.sendMessage(from,'Nih pesannya',text,{quoted:el[i]})
            }
            } catch(e){
            reply('Pesan tidak ditemukan!')
            }           
            break
case 'listpc':
if(!itsMe) return
cpc = await wa.getpc(totalchat)
teks = `*L I S T  P E R S O N A L  C H A T*\nJumlah PC: ${cpc.length}\n\n`
for(let i=0; i<cpc.length; i++){
	pushnama = await wa.getPushname(cpc[i], tod)
	teks += `${shp} Nama : ${pushnama}\n${shp} Tag : @${cpc[i].split("@")[0]}\n${shp} Wa.me : wa.me/${cpc[i].split("@")[0]}\n${shp} Id : ${cpc[i].split("@")[0]}@c.us\n${shp} Jid : ${cpc[i]}\n\n----------------------------------\n\n`
}
wa.Mentions(from, teks, cpc, tod)
break
case 'chats':
if(!itsMe) return
ingfo = await wa.getGroup(totalchat)
cpc = await wa.getpc(totalchat)
   teks1 = `*⬣ L I S T  G R O U P*\nJumlah Grup: ${ingfo.length}\n\n`
   for (let i = 0; i < ingfo.length; i++){
   teks1 += `${shp} Nama grup : ${ingfo[i].subject}\n${shp} ID grup : ${ingfo[i].id}\n${shp} Dibuat : ${moment(`${ingfo[i].creation}` * 1000).tz('Asia/Jakarta').format('DD/MM/YYYY HH:mm:ss')}\n${shp} Jumlah Peserta : ${ingfo[i].participants.length}\n\n`
   }
teks2 = `*⬣ L I S T  P E R S O N A L  C H A T*\nJumlah PC: ${cpc.length}\n\n`
for(let i=0; i<cpc.length; i++){
	pushnama = await wa.getPushname(cpc[i], tod)
	teks2 += `${shp} Nama : ${pushnama}\n${shp} Tag : @${cpc[i].split("@")[0]}\n${shp} Wa.me : wa.me/${cpc[i].split("@")[0]}\n${shp} Id : ${cpc[i].split("@")[0]}@c.us\n${shp} Jid : ${cpc[i]}\n\n----------------------------------\n\n`
}
wa.Mentions(from, teks1 +'\n\n'+ teks2, cpc, tod)
break
case 'stickmeme':
if ((isMedia && !zynn.message.videoMessage || isQuotedImage || isQuotedSticker)) {
fake(mess.wait)
ger = isQuotedImage || isQuotedSticker ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod							
if(!q) return reply('teksnya mana?')
owgi = await zynn.downloadMediaMessage(ger)
if(isQuotedSticker){
	await fs.writeFileSync(`./stickmeme.jpeg`, owgi)
	var imgbb = require('imgbb-uploader')
	anu = await imgbb("68cb5bee517bce4f74b0e910a5d96346", './stickmeme.jpeg')
	const res = `${anu.display_url}`
	await wa.sendStickerFromUrl(from, `https://pecundang.herokuapp.com/api/stickermeme?url=${res}&teks=${q}`, tod)
	fs.unlinkSync('./stickmeme.jpeg')
}
else{
	const res2 = await uploadImages(owgi, false)
console.log(res2)
	await wa.sendStickerFromUrl(from, `https://pecundang.herokuapp.com/api/stickermeme?url=${res2}&teks=${q}`, tod)
}
}
else{
	reply(`Reply gambar/sticker dengan caption ${prefix}stickmeme <teks>`)
}
break
case 'wasted':
case 'wanted':
case 'utatoo':
case 'unsharpen':
case 'tobecontinued':
case 'thanos':
case 'sniper':
case 'sharpen':
case 'sepia':
case 'scary':
case 'rip':
case 'redple':
case 'rejected':
case 'posterize':
case 'ps4':
case 'pixelize':
case 'missionpassed':
case 'moustache':
case 'lookwhatkarenhave':
case 'jail':
case 'invert':
case 'greyscale':
case 'glitch':
case 'gay':
case 'frame':
case 'fire':
case 'distort':
case 'dictator':
case 'deepfry':
case 'ddungeon':
case 'circle':
case 'challenger':
case 'burn':
case 'brazzers':
case 'beautiful':
case 'approved3000years':
try{
if (!tod.message.extendedTextMessage.contextInfo.mentionedJid[0] == ''){
   fake(mess.wait)
	org = `${q.replace("@","")}@c.us`
	try{
	ppk = await zynn.getProfilePicture(org)
	}catch{
	 return reply('Foto profil tidak ada/diprivate')
	}
	data = await ameapi.generate(command, {url: ppk})
    wa.sendImage(from, data, tod)
  }
else if ((isMedia && !zynn.message.videoMessage || isQuotedImage)) {
fake(mess.wait)
ger = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
    owgi = await zynn.downloadMediaMessage(ger)
    res = await uploadImages(owgi, false)
    data = await ameapi.generate(command, {url: res})
    wa.sendImage(from, data, tod)
}
else if(!tod.message.extendedTextMessage.contextInfo.participant == ''){
fake(mess.wait)
       	try{
	 ppk = await zynn.getProfilePicture(tod.message.extendedTextMessage.contextInfo.participant)
	}catch{
		return reply('Foto profil tidak ada/diprivate')
	}
        data = await ameapi.generate(command, {url: ppk})
    wa.sendImage(from, data, tod)
}
else{
        reply(`Reply gambar dengan caption ${prefix}${command}`)
}
}catch(e){
reply(`Tag orang/reply gambar dengan caption ${prefix}${command}`)
}
break
/*case 'swasted':
case 'swanted':
case 'sutatoo':
case 'sunsharpen':
case 'stobecontinued':
case 'sthanos':
case 'ssniper':
case 'ssharpen':
case 'ssepia':
case 'sscary':
case 'srip':
case 'sredple':
case 'srejected':
case 'sposterize':
case 'sps4':
case 'spixelize':
case 'smissionpassed':
case 'smoustache':
case 'slookwhatkarenhave':
case 'sjail':
case 'sinvert':
case 'sinstagram':
case 'sgreyscale':
case 'sglitch':
case 'sgay':
case 'sframe':
case 'sfire':
case 'sdistort':
case 'sdictator':
case 'sdeepfry':
case 'sddungeon':
case 'scircle':
case 'schallenger':
case 'sburn':
case 'sbrazzers':
case 'sbeautiful':
case 'sapproved3000years':
asu = body.slice(slc2).trim().split(/ +/).shift().toLowerCase()
try{
if (!tod.message.extendedTextMessage.contextInfo.mentionedJid[0] == ''){
fake(mess.wait)
   org = `${q.replace("@","")}@c.us`
        try{
	ppk = await zynn.getProfilePicture(org)
        }catch{
	 return reply('Foto profil tidak ada/diprivate')
	}
	data = await ameapi.generate(asu, {url: ppk})
    	console.log(data)
        buff = Buffer.from(data, 'base64')
        await fs.writeFileSync(`./${asu}.jpg`, buff)
        ples = `./${asu}.jpg`
        createSticker(ples, sender, asu)
  }
else if ((isMedia && !zynn.message.videoMessage || isQuotedImage)) {
	fake(mess.wait)
	ger = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
	owgi = await zynn.downloadMediaMessage(ger)
	res = await uploadImages(owgi, false)
	data = await ameapi.generate(asu, {'url': res})
	console.log(data)
	buff = Buffer.from(data, 'base64')
console.log(data)
        buff = Buffer.from(data, 'base64')
      	await fs.writeFileSync(`./${asu}.jpg`, buff)
	ples = `./${asu}.jpg`
	createSticker(ples, sender, asu)
}
        else if(isQuotedSticker){
if (tod.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage.isAnimated === true) return reply('Tidak mendukung sticker gif')
fake(mess.wait)
const encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
const media = await zynn.downloadMediaMessage(encmedia)
let toBase64 = media.toString('base64')
let upload = await require("./lib/uptoturu")(toBase64)
data = await ameapi.generate(asu, {url: upload.image.image.url})
        console.log(data)
        buff = Buffer.from(data, 'base64')
        await fs.writeFileSync(`./${asu}.jpg`, buff)
        ples = `./${asu}.jpg`
        createSticker(ples, sender, asu)
	}
/*ran = await wa.getRandom('.png')
exec(`ffmpeg -i ${media} ${ran}`,async (err) => {
        fs.unlinkSync(media)
        if (err) {
        reply(`gagal`)
        //fs.unlinkSync(ran)
} else {
        console.log('sukses')

        path = ran
        uplod = await Ra.UploadFile(path)
        console.log(uplod)
        data = await ameapi.generate(asu, {url: uplod.result.namaFile})
        console.log(data)
        buff = Buffer.from(data, 'base64')
        await fs.writeFileSync(`./${asu}.jpg`, buff)
        ples = `./${asu}.jpg`
        createSticker(ples, sender, asu)
	}
 })
}
else if(!tod.message.extendedTextMessage.contextInfo.participant == ''){
	fake(mess.wait)
        try{
	ppk = await zynn.getProfilePicture(tod.message.extendedTextMessage.contextInfo.participant)
        }catch{
	 return reply('Foto profil tidak ada/diprivate')
	}
	data = await ameapi.generate(asu, {url: ppk})
        console.log(data)
        buff = Buffer.from(data, 'base64')
        await fs.writeFileSync(`./${asu}.jpg`, buff)
        ples = `./${asu}.jpg`
        createSticker(ples, sender, asu)
}
else{
	reply(`reply gambar dengan caption ${prefix}${command}`)
}
}catch(e){
reply(`Tag orang/reply gambar dengan caption ${prefix}${command}`)
}
break
*/
case 'pinterest':
if(!q) return reply('Mau cari apa dipinterest?')
fake(mess.wait)
try{
	data = await wa.fetchJson(`https://api.zeks.xyz/api/pinimg?apikey=iloveyou3000&q=${q}`)
	media = await data.data[Math.floor(Math.random() * data.data.length)]
	console.log(media)
	sendMediaURL(from, media, `Hasil Pencarian : ${q}`)
}catch(e){
	reply('Gambar tidak ditemukan/error')
}
break
/*case 'jadibot':
const kon = new WAConnection()
 jadibot(kon, zynn, from, sender)
break*/
/*case 'listbot':
const djadibot2 = JSON.parse(fs.readFileSync('./src/djadibot.json'))
tag = []
   teks = 'List ZBOT:\n'
   for (let i of djadibot2) {
   teks += `${shp} User : @${i.jid.split('@')[0]}\n`
   teks += `${shp} Status : ${i.public}\n\n-----------------------\n\n`
   tag.push(i.jid)
}
   teks += `Total : ${djadibot.length}`
wa.Mentions(from, teks, tag, tod)
break
*/
case 'nulis':
reply(`*Pilihan*\n${prefix}nuliskiri\n${prefix}nuliskanan\n${prefix}foliokiri\n${prefix}foliokanan`)
break
case 'nuliskiri':{
if (!q) return reply(`Kirim perintah *${prefix}nuliskiri* teks`)
fake(mess.wait)
const splitText = q.replace(/(\S+\s*){1,9}/g, '$&\n')
const fixHeight = splitText.split('\n').slice(0, 31).join('\n')
spawn('convert', [
    './media/nulis/images/buku/sebelumkiri.jpg',
    '-font',
    './media/nulis/font/Indie-Flower.ttf',
    '-size',
    '960x1280',
    '-pointsize',
    '22',
    '-interline-spacing',
    '2',
    '-annotate',
    '+140+153',
    fixHeight,
    './media/nulis/images/buku/setelahkiri.jpg'
])
.on(mess.error.api, () => reply(mess.error.api))
.on('exit', () => {
    wa.sendImage(from, fs.readFileSync('./media/nulis/images/buku/setelahkiri.jpg'),tod,`Jangan malas ngab..!`)
})
            }
break
case 'nuliskanan':{
if (!q) return reply(`Kirim perintah *${prefix}nuliskanan* teks`)
fake(mess.wait)
const splitText = q.replace(/(\S+\s*){1,9}/g, '$&\n')
const fixHeight = splitText.split('\n').slice(0, 31).join('\n')
spawn('convert', [
    './media/nulis/images/buku/sebelumkanan.jpg',
    '-font',
    './media/nulis/font/Indie-Flower.ttf',
    '-size',
    '960x1280',
    '-pointsize',
    '23',
    '-interline-spacing',
    '2',
    '-annotate',
    '+128+129',
    fixHeight,
    './media/nulis/images/buku/setelahkanan.jpg'
])
.on(mess.error.api, () => reply(mess.error.api))
.on('exit', () => {
    wa.sendImage(from, fs.readFileSync('./media/nulis/images/buku/setelahkanan.jpg'),tod,`Jangan malas ngab..!`)
})
}
break
case 'foliokiri':{
if (!q) return reply(`Kirim perintah *${prefix}foliokiri* teks`)
fake(mess.wait)
const splitText = q.replace(/(\S+\s*){1,13}/g, '$&\n')
const fixHeight = splitText.split('\n').slice(0, 38).join('\n')
spawn('convert', [
    './media/nulis/images/folio/sebelumkiri.jpg',
    '-font',
    './media/nulis/font/Indie-Flower.ttf',
    '-size',
    '1720x1280',
    '-pointsize',
    '23',
    '-interline-spacing',
    '4',
    '-annotate',
    '+48+185',
    fixHeight,
    './media/nulis/images/folio/setelahkiri.jpg'
])
.on(mess.error.api, () => reply(mess.error.api))
.on('exit', () => {
    wa.sendImage(from, fs.readFileSync('./media/nulis/images/folio/setelahkiri.jpg'),tod,`Jangan malas ngab..!`)
})
}
break
case 'foliokanan':{
if (!q) return reply(`Kirim perintah *${prefix}foliokanan* teks`)
fake(mess.wait)
const splitText = q.replace(/(\S+\s*){1,13}/g, '$&\n')
const fixHeight = splitText.split('\n').slice(0, 38).join('\n')
spawn('convert', [
    './media/nulis/images/folio/sebelumkanan.jpg',
    '-font',
    './media/nulis/font/Indie-Flower.ttf',
    '-size',
    '960x1280',
    '-pointsize',
    '23',
    '-interline-spacing',
    '3',
    '-annotate',
    '+89+190',
    fixHeight,
    './media/nulis/images/folio/setelahkanan.jpg'
])
.on(mess.error.api, () => reply(mess.error.api))
.on('exit', () => {
    wa.sendImage(from, fs.readFileSync('./media/nulis/images/folio/setelahkanan.jpg'),tod,`Jangan malas ngab..!`)
})
}
break
case 'infonomor':
if(!q) return reply('Nomornya mana?')
if (args[0].includes('-')) return fakestatus(`Block nih contoh: ${prefix}infonomor 6289636006352`)
	fake(mess.wait)
nom = q.replace('@','')
if (!Number(nom)) return reply('Nomor harus berupa angka!')
exists = await zynn.isOnWhatsApp(nom)		
imni = await infotlp.getOperator(nom)
teks = `*I N F O  N O M O R*\n\n${shp} Operator : ${imni.operator}\n${shp} Kartu : ${imni.card}\n\n`
if(exists){
	teks += `Info : Nomor ini Terdaftar di Whatsapp dengan Jid : ${exists.jid}`
}
else{
	teks += `Info : Nomor ini Tidak terdaftar di Whatsapp!`
}
reply(teks)
break
case 'githubrepo':
if(!q) return reply('Masukkan username githubnya!')
fake(mess.wait)
try{
	data = await zahir.Github.searchRepo(q)
	hdata = data.items
teks = `REPOSITORY SEARCH\n\n`
for(let i of hdata){
	teks += `${shp} Nama Repo : ${i.nameRepo}\n${shp} Fullname Repo : ${i.fullNameRepo}\n${shp} Url Repo : ${i.url_repo}\n\n--------------------------\n\n`
}
	reply(teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'test':
if(!itsMe) return
const downloadM = async(save) => {

encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod

encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
if (save) return await zynn.downloadAndSaveMediaMessage(encmedia)
return await zynn.downloadMediaMessage(encmedia)
  }

buf = await downloadM() 
imeu = await zynn.prepareMessage('0@s.whatsapp.net', buf, image) 

imeg = imeu.message.imageMessage
res = await zynn.prepareMessageFromContent(from,{
  "orderMessage": {
            "orderId": "501374481143681",
            "thumbnail": imeg,
            "itemCount": 9999,
            "status": "INQUIRY",
            "surface": 404,
            "message": "Selfbot",
            "orderTitle": "</ Hanya Orang Biasa",
            "sellerJid": "6281990498472@s.whatsapp.net",
            "token": "AR6eHHZTvi8k3qMfxWHBCvAXO+vG5VW/1QtpiPpxL3Tfyg=="
            }
}, {quoted: imeu, contextInfo:{}}) 

zynn.relayWAMessage(res)
break
case 'product':
if(!itsMe) return
const downloadMM = async(save) => {

encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod

encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
if (save) return await zynn.downloadAndSaveMediaMessage(encmedia)
return await zynn.downloadMediaMessage(encmedia)
  }

buf = await downloadMM() 
imeu = await zynn.prepareMessage('0@s.whatsapp.net', buf, image) 

imeg = imeu.message.imageMessage
res = await zynn.prepareMessageFromContent(from,{
  "productMessage": {
    "product": {
      "productImage": imeg,
      "productId": "3656809567780692",
      "title": "Selfbot",
      "currencyCode": "IDR",
      "priceAmount1000": "999999990",
      "productImageCount": 1
    },
    "businessOwnerJid": zynn.user.jid,
    "contextInfo": {
      "forwardingScore": 3,
      "isForwarded": true
    }
  }
}, {quoted:imeu, contextInfo:{}}) 

zynn.relayWAMessage(res)
break
/*case 'loli':
try{
	data = await loli.getSFWLoli()
	sendMediaURL(from, data.url, 'LOLI')
}catch(e){
	reply(mess.error.api)
}
break
case 'shota':
try{
	data = await loli.getSFWShota()
	sendMediaURL(from, data.url, 'SHOTA')
}catch(e){
	reply(mess.error.api)
}
break
*/
case 'toptt':
if(isQuotedAudio){
reply(mess.wait)
   boij = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
   media = await zynn.downloadMediaMessage(boij)
   await fs.writeFileSync(`./src/audio/toptt.mp3`, media)
   buffer = fs.readFileSync(`./src/audio/toptt.mp3`)
   await wa.sendptt(from, buffer, tod)
   fs.unlinkSync('./src/audio/toptt.mp3')
}
break
case 'toaudio':
if(isQuotedAudio){
reply(mess.wait)
   boij = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
   media = await zynn.downloadMediaMessage(boij)
   await fs.writeFileSync(`./src/audio/toaudio.mp3`, media)
   buffer = fs.readFileSync(`./src/audio/toaudio.mp3`)
   await wa.sendAudio(from, buffer, tod)
   fs.unlinkSync('./src/audio/toaudio.mp3')
}
break
case 'tomp3':
zynn.updatePresence(from, Presence.composing) 
if (!isQuotedVideo) return reply('reply videonya um')
reply('tunggu sebentar')
encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await zynn.downloadAndSaveMediaMessage(encmedia)
ran = wa.getRandom('.mp4')
exec(`ffmpeg -i ${media} ${ran}`, (err) => {
	fs.unlinkSync(media)
	if (err) return reply('Gagal, pada saat mengkonversi video ke mp3')
	buffer = fs.readFileSync(ran)
	zynn.sendMessage(from, buffer, audio, {mimetype: 'audio/mp4', quoted: tod})
	fs.unlinkSync(ran)
})
break
case 'slow':
encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await zynn.downloadAndSaveMediaMessage(encmedia)
ran = wa.getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a "atempo=0.7,asetrate=44100" ${ran}`, (err, stderr, stdout) => {
	fs.unlinkSync(media)
	if (err) return reply('Error!')
	hah = fs.readFileSync(ran)
	wa.sendptt(from, hah, tod)
	fs.unlinkSync(ran)
})
break
case 'bass':  
encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await zynn.downloadAndSaveMediaMessage(encmedia)
ran = wa.getRandom('.mp3')
exec(`ffmpeg -i ${media} -af equalizer=f=${body.slice(6)}:width_type=o:width=2:g=30 ${ran}`, (err, stderr, stdout) => {
	fs.unlinkSync(media)
	if (err) return reply('Error!')
	hah = fs.readFileSync(ran)
	wa.sendptt(from, hah, tod)
	fs.unlinkSync(ran)
})
break
case 'ghost':
     if (!isQuotedAudio) return reply('Reply audio nya om')
encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await zynn.downloadAndSaveMediaMessage(encmedia)
ran = wa.getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a "atempo=1.6,asetrate=3486" ${ran}`, (err, stderr, stdout) => {
   fs.unlinkSync(media)
   if (err) return reply('Error!')
   hah = fs.readFileSync(ran)
   wa.sendptt(from, hah, tod)
   fs.unlinkSync(ran)
    })
break
case 'tupai':
     if (!isQuotedAudio) return reply('Reply audio nya om')
encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await zynn.downloadAndSaveMediaMessage(encmedia)
ran = wa.getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a "atempo=0.5,asetrate=65100" ${ran}`, (err, stderr, stdout) => {
   fs.unlinkSync(media)
   if (err) return reply('Error!')
   hah = fs.readFileSync(ran)
   wa.sendptt(from, hah, tod)
   fs.unlinkSync(ran)
    })
break
case 'blub':
     if (!isQuotedAudio) return reply('Reply audio nya om')
encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await zynn.downloadAndSaveMediaMessage(encmedia)
ran = wa.getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a "atempo=0.9,asetrate=95100" ${ran}`, (err, stderr, stdout) => {
   fs.unlinkSync(media)
   if (err) return reply('Error!')
   hah = fs.readFileSync(ran)
   wa.sendptt(from, hah, tod)
   fs.unlinkSync(ran)
    })
break
case 'gemuk':
     if (!isQuotedAudio) return reply('Reply audio nya om')
encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await zynn.downloadAndSaveMediaMessage(encmedia)
ran = wa.getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a "atempo=1.6,asetrate=22100" ${ran}`, (err, stderr, stdout) => {
   fs.unlinkSync(media)
   if (err) return reply('Error!')
   hah = fs.readFileSync(ran)
   wa.sendptt(from, hah, tod)
   fs.unlinkSync(ran)
    })
break
case 'nightcore':
     if (isQuotedAudio){
encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await zynn.downloadAndSaveMediaMessage(encmedia)
ran = wa.getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a atempo=1.06,asetrate=44100*1.25 ${ran}`, (err, stderr, stdout) => {
   fs.unlinkSync(media)
   if (err) return reply('Error!')
   hah = fs.readFileSync(ran)
   wa.sendptt(from, hah, tod)
   fs.unlinkSync(ran)
   })}
break
case 'baterai':
const batree = JSON.parse(fs.readFileSync('./src/batre.json'))
const bateraii = batree[1].value
ischarge = batree[1].live == 'true' ? "Charging ⚡" : "Not Charged"
ispsave = batree[1].powersave == 'true' ? "Aktif" : "Nonaktif"
fake(`${shp} Baterai : ${bateraii}%\n${shp} Status Baterai : ${ischarge}\n${shp} Penghemat Baterai : ${ispsave}`)
break
case 'cekchat':
var chats = await zynn.chats.all()
let j = []
let giidd = []
for (mem of totalchat){
	j.push(mem.jid)
}
for (id of j){
	if (id && id.includes('g.us')){
	giidd.push(id)
	}
}
teks = `Total chat : ${chats.length} chat\n\n${shp} Group Chat : ${giidd.length}\n${shp} Personal Chat : ${totalchat.length - giidd.length}`
fake(teks)
break
case 'emoji':
if(!q) return reply(`Silahkan pilih salah satu : \n${shp} apple\n${shp} google\n${shp} samsung\n${shp} microsoft\n${shp} whatsapp\n${shp} twitter\n${shp} facebook\n${shp} joypixels\n${shp} openmoji\n${shp} emojidex\n${shp} lg\n${shp} htc\n\nContoh : ${prefix}emoji ☹️|whatsapp`)
emot = q.split('|')[0]
jemot = q.split('|')[1]
if(jemot == 'apple'){
	idemot = 0
}
else if(jemot == 'google'){
	idemot = 1
}
else if(jemot == 'samsung'){
	idemot = 2
}
else if(jemot == 'microsoft'){
	idemot = 3
}
else if(jemot == 'whatsapp'){
	idemot = 4
}
else if(jemot == 'twitter'){
	idemot = 5
}
else if(jemot == 'facebook'){
	idemot = 6
}
else if(jemot == 'joypixels'){
	idemot = 7
}
else if(jemot == 'openmoji'){
	idemot = 8
}
else if(jemot == 'emojidex'){
	idemot = 9
}
else if(jemot == 'lg'){
	idemot = 10
}
else if(jemot == 'htc'){
	idemot = 11
}
else if(!jemot){
	idemot = 4
}
else{
	return reply(`Silahkan pilih salah satu : \n${shp} apple\n${shp} google\n${shp} samsung\n${shp} microsoft\n${shp} whatsapp\n${shp} twitter\n${shp} facebook\n${shp} joypixels\n${shp} openmoji\n${shp} emojidex\n${shp} lg\n${shp} htc\n\nContoh : ${prefix}emoji ☹️|whatsapp`)
}
if(idemot == undefined) return
emoji.get(emot)
    .then(emoji => {
        console.log(emoji.images[idemot]);
wa.sendStickerFromUrl(from,emoji.images[idemot].url, tod)
    })
break
case 'totag':
  if (!itsMe) return
   if(!q) return reply('Ingfonya apa?')
var group = await zynn.groupMetadata(from)
   var member = group['participants']
   var mem = []
   member.map(async adm => {
   mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
   })
var itsme = fakenomor
               var split = fake
               var selfbotz = {
                  contextInfo: {
                     mentionedJid: mem,
                                                        participant: itsme,                                                                                                                          quotedMessage: {
                                                                extendedTextMessage: {
                                                                text: split,
                        }
                              }
                      }
               }
if(!tod.message.extendedTextMessage.contextInfo.quotedMessage.conversation == ''){
	zynn.sendMessage(from, tod.message.extendedTextMessage.contextInfo.quotedMessage.conversation, MessageType.text, {contextInfo: {mentionedJid: mem},
            quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
         })
				}
else if (isQuotedSticker){
   boij = JSON.parse(JSON.stringify(tod).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
   delb = await zynn.downloadMediaMessage(boij)
   await fs.writeFileSync(`./media/stctagg.webp`, delb)
   result = fs.readFileSync(`./media/stctagg.webp`)
   zynn.sendMessage(from, result, MessageType.sticker, {contextInfo: {mentionedJid: mem},
            quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
         })
   await fs.unlinkSync(`./media/stctagg.webp`)
}
else if(isQuotedImage){
   boij = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace("quotedM", "m")).message.extendedTextMessage.contextInfo : tod
   delb = await zynn.downloadMediaMessage(boij)
   await fs.writeFileSync(`./media/imgtag.jpg`, delb)
   result = fs.readFileSync(`./media/imgtag.jpg`)
   zynn.sendMessage(from, result, MessageType.image, {contextInfo: {mentionedJid: mem},
            quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
         })
   await fs.unlinkSync(`./media/imgtag.jpg`)
}
else if(isQuotedAudio){
   boij = JSON.parse(JSON.stringify(tod).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
   delb = await zynn.downloadMediaMessage(boij)
   await fs.writeFileSync(`./media/vntag.mp3`, delb)
   result = fs.readFileSync(`./media/vntag.mp3`)
   if(tod.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage.ptt == true){
         		pett = true
         	}
         	else{
         		pett = false
         	}
            zynn.sendMessage(from, result, MessageType.audio, {mimetype: 'audio/mp4', ptt: pett, contextInfo: {mentionedJid: mem},
            quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
         })
   await fs.unlinkSync(`./media/vntag.mp3`)
}
else if(isQuotedVideo){
   boij = JSON.parse(JSON.stringify(tod).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
   delb = await zynn.downloadMediaMessage(boij)
   await fs.writeFileSync(`./media/videotag.mp4`, delb)
   result = fs.readFileSync(`./media/videotag.mp4`)
   try{
   if(tod.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.gifPlayback == true){
   	try{
   		zynn.sendMessage(from, result, video, {mimetype: Mimetype.gif, contextInfo: {mentionedJid: mem}, caption:tod.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.caption, quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
})
   		await fs.unlinkSync(`./media/videotag.mp4`)
   	}catch(e){
   		zynn.sendMessage(from, result, video, {mimetype: Mimetype.gif, contextInfo: {mentionedJid: mem}, quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
})
   		await fs.unlinkSync(`./media/videotag.mp4`)
   	}
   }
}catch(e){
	try{
   zynn.sendMessage(from, result, MessageType.video, {mimetype: 'video/mp4', contextInfo: {mentionedJid: mem}, caption: tod.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.caption,
            quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
         })
   await fs.unlinkSync(`./media/videotag.mp4`)

}catch(e){
zynn.sendMessage(from, result, MessageType.video, {mimetype: 'video/mp4', contextInfo: {mentionedJid: mem}, caption: tod.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.caption,
            quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
         })
   await fs.unlinkSync(`./media/videotag.mp4`)
}
}}
else if(isQuotedDocument){
  boij = JSON.parse(JSON.stringify(tod).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
   delb = await zynn.downloadMediaMessage(boij)
   await fs.writeFileSync(`./media/doctag`, delb)
   result = fs.readFileSync(`./media/doctag`)
   zynn.sendMessage(from, result, MessageType.document, {mimetype: tod.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage.mimetype,filename: `${tod.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage.fileName}`, contextInfo: {mentionedJid: mem},
            quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
         })
   await fs.unlinkSync(`./media/doctag`)
}
else if(isQuotedlocation){
sloc = tod.message.extendedTextMessage.contextInfo.quotedMessage.locationMessage
			try{
			zynn.sendMessage(from,  {degreesLatitude: sloc.degreesLatitude, degreesLongitude: sloc.degreesLongitude, name: sloc.name , address: sloc.address}, MessageType.location, {contextInfo: {mentionedJid: mem}, 
		quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
})
		}catch(e){
			zynn.sendMessage(from,  {degreesLatitude: sloc.degreesLatitude, degreesLongitude: sloc.degreesLongitude}, MessageType.location, {contextInfo: {mentionedJid: mem},
		quoted: {
               key: {
                  fromMe: false,
                  participant: fakenomor, ...(from ? { remoteJid: '6289523258649-1604595598@g.us' } : {})
               },
               message: {
                  conversation: `${q}`
               }
            }
})
		}
}
else{
   return reply('Reply sticker/image/video/vn/document!')
}
   break
case 'resend':
	  if(isQuotedSticker){
	  boij = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
	delb = await zynn.downloadMediaMessage(boij)
	fs.writeFileSync(`./src/sticker/resend.jpg`, delb)
	buff = fs.readFileSync('./src/sticker/resend.jpg')
	wa.sendStickerWithFG(from, buff)
	fs.unlinkSync('./src/sticker/resend.jpg')
	  }
	  else if(isQuotedImage){
	    boij = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
	delb = await zynn.downloadMediaMessage(boij)
	fs.writeFileSync(`./src/image/resend.jpg`, delb)
	buff = fs.readFileSync('./src/image/resend.jpg')
	try{
	wa.sendImage(from, buff, tod, ' ' + tod.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage.caption)
	}catch(e){
	wa.sendImage(from,buff, tod)
	}
	fs.unlinkSync('./src/image/resend.jpg')
	  }
	else if(isQuotedVideo){
	    boij = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
	delb = await zynn.downloadMediaMessage(boij)
	fs.writeFileSync(`./src/image/resend.mp4`, delb)
	buff = fs.readFileSync('./src/image/resend.mp4')
	try{
	wa.sendVideo(from, buff, tod,' ' + tod.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.caption)
	}catch(e){
	wa.sendVideo(from,buff, tod)
	}
	fs.unlinkSync('./src/image/resend.mp4')
	  }
	 else if(isQuotedAudio){
	   boij = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
	delb = await zynn.downloadMediaMessage(boij)
	fs.writeFileSync(`./src/audio/resend.mp3`, delb)
	buff = fs.readFileSync('./src/audio/resend.mp3')
	if(tod.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage.ptt == true){
	wa.sendptt(from, buff, tod)
	}
	else{
	wa.sendAudio(from,buff, tod)
}
	fs.unlinkSync('./src/audio/resend.mp3')
	 }
	 else if(tod.message.extendedTextMessage.contextInfo.quotedMessage){
	   fake(' ' + tod.message.extendedTextMessage.contextInfo.quotedMessage.conversation)
	 }
	break
case 'addvn':
  if(!itsMe) return reply(mess.only.ownerB)
	if (!isQuotedAudio) return reply('Reply vnnya blokk!')
	svst = q
	if (!svst) return reply('Nama audionya apa su?')
	boij = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
	delb = await zynn.downloadMediaMessage(boij)
	audionye.push(`${svst}`)
	fs.writeFileSync(`./src/audio/${svst}.mp3`, delb)
	fs.writeFileSync('./src/audio.json', JSON.stringify(audionye))
	reply(`Sukses Menambahkan Vn\nCek dengan cara ${prefix}listvn`)
	break
case 'getvn':
try{
	namastc = q
	buffer = fs.readFileSync(`./src/audio/${namastc}.mp3`)
	zynn.sendMessage(from, buffer, audio, {mimetype: 'audio/mp4', quoted: tod, ptt: true})
}catch(e){
	return reply(`Vn dengan nama ${q} tidak ada didatabase`)
}
	break
case 'listvn':
case 'vnlist':
	teks = 'List Vn:\n'
	for (let awokwkwk of audionye) {
	teks += `${shp} ${awokwkwk}\n`
	}
	teks += `Total : ${audionye.length}`
	reply(teks)
	break
case 'addstc':
case 'addstiker':
  if(!itsMe) return reply(mess.only.ownerB)
if (!isQuotedSticker) return reply('Stickernya mana :(')
	svst = q
	if (!svst) return reply('Nama stickernya :v?')
	boij = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
	delb = await zynn.downloadMediaMessage(boij)
	stikernye.push(svst)
	fs.writeFileSync(`./src/sticker/${svst}.jpg`, delb)
	fs.writeFileSync('./src/stiker.json', JSON.stringify(stikernye))
	reply(`Sukses Menambahkan Sticker\nCek dengan cara ${prefix}liststiker`)
	break
case 'getstc':
try{
buffer = fs.readFileSync(`./src/sticker/${q}.jpg`)
sendStickerWithFG(buffer)
}catch(e){
	reply('Sticker tidak tersedia di database')
}
break
case 'addimg':
  if(!itsMe) return reply(mess.only.ownerB)
	if (!isQuotedImage) return reply('Reply gambarnya blokk!')
	svst = q
	if (!svst) return reply('Nama gambarnya apa su?')
	boij = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
	delb = await zynn.downloadMediaMessage(boij)
	gambarnye.push(`${svst}`)
	fs.writeFileSync(`./src/image/${svst}.jpg`, delb)
	fs.writeFileSync('./src/image.json', JSON.stringify(gambarnye))
	reply(`Sukses Menambahkan Gambar\nCek dengan cara ${prefix}listimg`)
	break
case 'getimg':
 if(!q) return reply('Nama gambarnya apa?')
 try{
	namastc = q
	buffer = fs.readFileSync(`./src/image/${namastc}.jpg`)
	wa.sendImage(from, buffer, tod, q)
 }catch(e) {
   reply(`Gambar ${q} tidak tersedia di database`)
 }
	break
case 'addvideo':
  if(!itsMe) return reply(mess.only.ownerB)
   if (!isQuotedVideo) return reply('Reply video blokk!')
   svst = q
   if (!svst) return reply('Nama videonya apa su?')
   boij = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
   delb = await zynn.downloadMediaMessage(boij)
   videonye.push(`${svst}`)
   fs.writeFileSync(`./src/video/${svst}.mp4`, delb)
   fs.writeFileSync('./src/video.json', JSON.stringify(videonye))
   reply(`Sukses Menambahkan Video\nCek dengan cara ${prefix}listvideo`)
   break
case 'listvideo':
   teks = 'List Video:\n'
   for (let awokwkwk of videonye) {
   teks += `${shp} ${awokwkwk}\n`
   }
   teks += `Total : ${videonye.length}`
   reply(teks)
   break
 case 'liststc':
   teks = 'List Sticker:\n'
   for (let awokwkwk of stikernye) {
   teks += `${shp} ${awokwkwk}\n`
   }
   teks += `Total : ${stikernye.length}`
   reply(teks)
   break
   case 'listimg':
   teks = 'List Image:\n'
   for (let awokwkwk of gambarnye) {
   teks += `${shp} ${awokwkwk}\n`
   }
   teks += `Total : ${gambarnye.length}`
   reply(teks)
   break
case 'getvideo':
  if(!q) return reply('Nama Videonya apa?')
  try{
namavideo = q
buffer = fs.readFileSync(`./src/video/${namavideo}.mp4`)
wa.sendVideo(from, buffer, tod, q)
}catch(e){
  reply(`Video ${q} tidak tersedia didatabase`)
}
break
case 'delvidio':
  if(!itsMe) return reply(mess.only.ownerB)
 if(!q) return reply('Nama videonya apa?')
 try{
fs.unlinkSync(`./src/video/${q}.mp4`)
del = videonye.indexOf(q)
videonye.splice(del, 1)
fs.writeFileSync('./src/video.json', JSON.stringify(videonye))
reply(`Sukses menghapus video ${q} dari database`)
}catch(e){
  reply(`Video ${q} tidak ada didatabase`)
}
break
case 'delstc':
  if(!itsMe) return reply(mess.only.ownerB)
  if(!q) return reply('Nama stickernya apa?')
  try{
fs.unlinkSync(`./src/sticker/${q}.jpg`)
del = stikernye.indexOf(q)
stikernye.splice(del,1)
fs.writeFileSync('./src/stiker.json', JSON.stringify(stikernye))
reply(`Sukses menghapus sticker ${q} dari database`)
}catch(e){
  reply(`Sticker ${q} tidak ada didatabase`)
}
break
case 'delvn':
  if(!itsMe) return reply(mess.only.ownerB)
  if(!q) return reply('Nama vnnya apa?')
  try{
fs.unlinkSync(`./src/audio/${q}.mp3`)
del = audionye.indexOf(q)
audionye.splice(del,1)
fs.writeFileSync('./src/audio.json', JSON.stringify(audionye))
reply(`Sukses mengapus vn ${q} dari database`)
}catch(e){
  reply(`Voice Note ${q} tidak ada didatabase`)
}
break
case 'delimg':
  if(!itsMe) return reply(mess.only.ownerB)
 try{
fs.unlinkSync(`./src/image/${q}.jpg`)
del = gambarnye.indexOf(q)
gambarnye.splice(del,1)
fs.writeFileSync('./src/image.json', JSON.stringify(gambarnye))
reply(`Sukses menghapus gambar ${q} dari database`)
}catch(e){
  reply(`Gambar ${q} tidak ada didatabase`)
}
break
case 'image':
if (args.length < 1) return reply('Masukan teks!')
fake(mess.wait)
try{
gis(q, async (error, result) => {
n = result
images = n[Math.floor(Math.random() * n.length)].url
sendMediaURL(from, images,`Hasil Pencarian : ${q}`)
});
}catch(e){
	reply('Gambar tidak ditemukan')
}
break
case 'ytdl':
if(!q) return reply('Mau cari apa diyoutube?')
fake(mess.wait)
datai = [];
try{
        ysearch = await yts(q)
        hdata = ysearch.all
}catch(e){
        return reply(mess.error.api)
}
num = 1
for(let i=0; i<hdata.length; i++){
        datai.push({
                        "rows": [
                           {
                              "title": "MP3",
                                                          description: `Title: ${hdata[i].title}\n\nUploader: ${hdata[i].author.name}`,
                              "rowId": hdata[i].url
                           },
                                                   {
                              "title": "MP4",
                                                          description: `Title: ${hdata[i].title}\n\nUploader: ${hdata[i].author.name}`,
                              "rowId": hdata[i].url
                           }
                        ], title: num})
        num += 1
}
po = zynn.prepareMessageFromContent(from, {
         "listMessage":{
                  "title": "*YOUTUBE DOWNLOAD*",
                  "description": `Request By : ${await wa.getPushname(sender, tod)}\n*Hasil Pencarian : ${q}*\n*Download dengan klik tombol dibawah*`,
                  "buttonText": "Result",
                  "listType": "SINGLE_SELECT",
                  "sections": datai}}, {contextInfo: {mentionedJid: [sender]}}) 
            zynn.relayWAMessage(po, {waitForAck: true})
break
case 'ytsearch':
if(!q) return reply('Mau cari apa diyoutube?')
try{
	ysearch = await yts(q)
}catch(e){
	return reply(mess.error.api)
}
teks = `*Y O U T U B E  S E A R C H*\n\n`
for(let i of ysearch.all){
	teks += shp +` Title :` + i.title + '\n'
	teks += shp +` Url :` + i.url + '\n'
	teks += shp +` Durasi :` + i.timestamp + '\n'
	teks += shp +` Upload :` + i.ago + '\n\n-----------------------------\n\n'
}
sendMediaURL(from, ysearch.all[0].thumbnail, teks)
break
/*case 'tiktok':
if(!q) return reply('Link tiktoknya mana?')
fake(mess.wait)
try{
data = await wa.fetchJson(`https://docs-jojo.herokuapp.com/api/tiktok_wm?url=${q}`)
buff = await wa.getBuffer(data.result)
wa.sendVideo(from, buff, tod, `Nih video Tiktoknya`)
}catch(e){
reply(mess.error.api)
}
break*/
case 'tiktoknowm':
if(!q) return reply('Masukkan linknya!')
if(!isUrl(q)) return reply(mess.error.Iv)
fake(mess.wait)
try{
	data = await wa.fetchJson(`https://fxc7-api.herokuapp.com/api/download/tiktok?apikey=Fxc7&url=` + q)
	wa.sendFileFromUrl(from, data.result.nowatermark, tod, '*T I K T O K  N O  W A T E R M A R K*')
}catch{
	reply(mess.error.api)
}
break
case 'tiktok':
if(!q) return reply('Masukkan linknya!')
if(!isUrl(q)) return reply(mess.error.Iv)
fake(mess.wait)
try{
	data = await wa.fetchJson(`https://fxc7-api.herokuapp.com/api/download/tiktok?apikey=Fxc7&url=` + q)
	buff = await wa.getBuffer(data.result.watermark)
	wa.sendVideo(from, buff, tod, '*T I K T O K  W A T E R M A R K*')
}catch{
	reply(mess.error.api)
}
break
case 'tiktokaudio':
if(!q) return reply('Masukkan linknya!')
if(!isUrl(q)) return reply(mess.error.Iv)
fake(mess.wait)
try{
	data = await wa.fetchJson(`https://fxc7-api.herokuapp.com/api/download/tiktok?apikey=Fxc7&url=` + q)
	buff = await wa.getBuffer(data.result.audio)
	wa.sendAudio(from, buff, tod)
}catch{
	reply(mess.error.api)
}
break
case 'play':
if(!q) return reply('Masukkan judulnya!')
fake(mess.wait)
try{
searchm = await yts(q)
}catch(e){
	return reply('Lagu tidak ditemukan/error!')
}
datam = searchm.all[0]
try{
	downm = await yta(datam.url)
	const { dl_link, thumb, title, filesizeF, filesize } = downm
	if(Number(filesize) >= 50000){
		short = await axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
		return sendMediaURL(from, thumb, `*P L A Y  M U S I C*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n${shp} Link : ${short.data}\n\n${mess.oversize}`)
	}
	teks = `*P L A Y  M U S I C*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n\nTunggu sebentar\nMusic segera dikirim`
	wa.sendFileFromUrl(from, thumb, tod, teks)
	wa.sendFileFromUrl(from, dl_link, tod)
	}catch(e){
	reply(mess.error.api)
}
break
case 'ytmp3':
if(!q) return reply('Masukkan link Youtube!')
Links = args[0].match(/(?:https?:\/{2})?(?:w{3}\.)?youtu(?:be)?\.(?:com|be)(?:\/watch\?v=|\/)([^\s&]+)/)
if (!Links) return reply(mess.error.Iv)
fake(mess.wait)
try{
	downm = await yta(q)
	const { dl_link, thumb, title, filesizeF, filesize } = downm
	if(Number(filesize) >= 50000){
		short = await axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
		return sendMediaURL(from, thumb, `*Y T M P 3  D O W N L O A D E R*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n${shp} Link : ${short.data}\n\n${mess.oversize}`)
	}
	teks = `*Y T M P 3  D O W N L O A D E R*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n\nTunggu sebentar\nMusic segera dikirim`
	wa.sendFileFromUrl(from, thumb, tod, teks)
	wa.sendFileFromUrl(from, dl_link, tod)
}catch(e){
	reply(mess.error.api)
}
break
case 'video':
if(!q) return reply('Masukkan judulnya!')
fake(mess.wait)
try{
searchm = await yts(q)
}catch(e){
	return reply('Lagu tidak ditemukan/error!')
}datam = searchm.all[0]
try{
	downm = await ytv(datam.url)
	const { dl_link, thumb, title, filesizeF, filesize } = downm
	if(Number(filesize) >= 50000){
		short = await axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
		return sendMediaURL(from, thumb, `*P L A Y  V I D E O*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n${shp} Link : ${short.data}\n\n${mess.oversize}`)
	}
	teks = `*P L A Y  V I D E O*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n\nTunggu sebentar\nVideo segera dikirim`
	await sendMediaURL(from, thumb, teks)
	sendMediaURL(from, dl_link)
	}catch(e){
	reply(mess.error.api)
}
break
case 'ytmp4':
if(!q) return reply('Masukkan link Youtube!')
Links = args[0].match(/(?:https?:\/{2})?(?:w{3}\.)?youtu(?:be)?\.(?:com|be)(?:\/watch\?v=|\/)([^\s&]+)/)
if (!Links) return reply(mess.error.Iv)
fake(mess.wait)
try{
	downm = await ytv(q)
	const { dl_link, thumb, title, filesizeF, filesize } = downm
	if(Number(filesize) >= 50000){
		short = await axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
		return sendMediaURL(from, thumb, `*Y T M P 4  D O W N L O A D E R*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n${shp} Link : ${short.data}\n\n${mess.oversize}`)
	}
	teks = `*Y T M P 4  D O W N L O A D E R*\n\n${shp} Judul : ${title}\n${shp} Size : ${filesizeF}\n\nTunggu sebentar\nMusic segera dikirim`
	await sendMediaURL(from, thumb, teks)
	sendMediaURL(from, dl_link)
}catch(e){
	reply(mess.error.api)
}
break
case 'google':
if(!q) return reply('Masukkan kata kunci!')
if(q == undefined || q == ' ') return reply(`*Hasil Pencarian : ${q}* tidak ditemukan`)
fake(mess.wait)
google({ 'query': q }).then(results => {
	let vars = `_*Hasil Pencarian : ${q}*_\n`
	for (let i = 0; i < results.length; i++) {
    vars +=  `\n═════════════════\n\n*Judul* : ${results[i].title}\n\n*Deskripsi* : ${results[i].snippet}\n\n*Link* : ${results[i].link}\n\n`
    }
    	reply(vars)
    }).catch(e => {
    console.log(e)
    reply('Google Error')
})
break
case 'brainly':
if(!q) return reply('Apa yang mau anda cari?')
   fake(mess.wait)
try{
jwbn = await brainly(q)
hdata = jwbn.data
console.log(jwbn)
teks = `*B R A I N L Y*\n${shp} Query : ${q}\n${shp} Jumlah Jawaban : ${hdata.length}\n\n`
for(let i of hdata){
   console.log(i.jawaban[0].text)
   teks += `${shp} Pertanyaan : ${i.pertanyaan}\n\n${shp} Jawaban : ${i.jawaban[0].text}\n\n-----------------------------\n\n`
}
reply(teks)
}catch(e){
   reply(mess.error.api)
}
break
case 'infogempa':
try{
	ress = await Ra.Gempa()
	teks = `*G E M P A  T E R K I N I*\n\n`
	for(let i of ress){
			teks += shp + ` Tanggal : ` + i.result.tanggal + '\n'
			teks += shp + ` Koordinat : ` + i.result.koordinat + '\n'
			teks += shp + ` Magnitude : ` + i.result.getaran + '\n'
			teks += shp + ` Kedalaman : ` + i.result.kedalaman + '\n'
			teks += shp + ` Skala : ` + i.result.skala + '\n\n-----------------------------\n\n'
		}
	reply(teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'wiki':
case 'wikipedia':
case 'wikisearch':
if(!q) return reply('Mau cari apa diwikipedia?')
fake(mess.wait)
try{
	data = await skrep.wikisearch(q)
	teks = `*W I K I P E D I A*\n${shp} Query : ${data[0].judul}\n\n${data[0].wiki}`
	wa.sendFileFromUrl(from, data[0].thumb, tod, teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'lirik':
if(!q) return reply('Mau cari lirik lagu apa?')
try{
	data = await Ra.Musikmatch(q)
	hdata = data.result
	teks = `*L I R I K  L A G U*\n\n${shp} Judul : ${hdata.judul}\n${shp} Penyanyi : ${hdata.penyanyi}\n${shp} Lirik : \n${hdata.lirik}`
	reply(teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'ig':
case 'instagram':
if(!q) return reply('Masukkan link instagram!')
if(!isUrl(q)) return reply('Masukkan url dengan benar!')
fake(mess.wait)
try{
	data = await wa.fetchJson(`https://fxc7-api.herokuapp.com/api/download/ig?apikey=Fxc7&url=` + q)
	teks = `*I N S T A G R A M  D O W N L O A D E R*\n\n${shp} Username : ${data.result.username}\n${shp} Caption : ${data.result.caption}\n${shp} Likes : ${data.result.likes}\n\ntunggu Sebentar\nMedia akan segera dikirim...`
	reply(teks)
	for(let i of data.result.data){
	buff = await wa.getBuffer(i.data)
	if(i.type == 'image'){
	wa.sendImage(from, buff, tod, `_INSTAGRAM DOWNLOADER_\n\n${shp} Username : ${data.result.username}\n${shp} Caption : ${data.result.caption}\n${shp} Type Media : ${i.type}`)
}
else if(i.type == 'video'){
wa.sendVideo(from, buff, tod, `_INSTAGRAM DOWNLOADER_\n\n${shp} Username : ${data.result.username}\n${shp} Caption : ${data.result.caption}/n${shp} Type Media : ${i.type}`)
}
}
}
catch(e){
	wa.sendFileFromUrl(from, data.result.url, tod, `_INSTAGRAM DOWNLOADER_\n\n${shp} Username : ${data.result.username}\n${shp} Caption : ${data.result.caption}`)
}
break
case 'igstalk':
if(!q) return reply('Masukkan username instagram!')
fake(mess.wait)
try{
	data = await wa.fetchJson(`https://lindow-api.herokuapp.com/api/igstalk?username=${q}&apikey=LindowApi`)
	verify = data.isVerified == false ? '❎' : '✅'
	privet = data.isPrivate == false ? '❎' : '✅'
	teks = `*I N S T A G R A M  S T A L K*\n\n${shp} Username : ${data.username}\n${shp} Fullname : ${data.fullName}\n${shp} Followers : ${data.subscribersCount}\n${shp} Following : ${data.subscribtions}\n${shp} Verified : ${verify}\n${shp} Private : ${privet}\n${shp} Jumlah Post : ${data.postsCount}\n${shp} Bio : ${data.biography}`
	sendMediaURL(from, data.profilePicHD, teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'tiktokstalk':
try {
	if (args.length < 1) return reply('Masukkan username!')
	let { user, stats } = await tiktod.getUserProfileInfo(q)
	teks = `*T I K T O K  S T A L K*\n\n${shp} *ID* : ${user.id}\n${shp} *Username* : ${user.uniqueId}\n${shp} *Nickname* : ${user.nickname}\n${shp} *Followers* : ${stats.followerCount}\n${shp} *Followings* : ${stats.followingCount}\n${shp} *Posts* : ${stats.videoCount}\n${shp} *Luv* : ${stats.heart}`
	buffer = await wa.getBuffer(user.avatarLarger)
	wa.sendImage(from, buffer, tod, teks)
} catch (e) {
	console.log(`Error :`, color(e,'red'))
	reply(mess.error.api)
}
break
case 'ytstalk':
if(!q) return reply('masukkan nama channel youtube!')
fake(mess.wait)
try{
	data = await wa.fetchJson(`https://x-restapi.herokuapp.com/api/yt-stalk?username=${q}&apikey=BETA`)
	teks = `*Y O U T U B E  S T A L K*\n\n${shp} Nama Channel : ${data.channel}\n${shp} Subscribers : ${data.subscriberCount}\n${shp} Deskripsi : ${data.description}\n${shp} Link Channel : ${data.link}`
	sendMediaURL(from, data.thumb, teks)
}catch(e){
	reply('Channel tidak ditemukan/error!')
}
break
case 'findsticker':
if(!q) return reply('Mau cari sticker apa?')
fake(mess.wait)
try{
	data = await Ra.StickerSearch(q)
	for(let i=0; i<10; i++){
		if(data.data.sticker[i] === undefined) return console.log('Sticker habis, pengiriman diberhentikan')
		sendStickerFromUrl(data.data.sticker[i])
		await wa.sleep(3000)
	}
}catch(e){
	reply('Sticker tidak ditemukan')
}
break
case 'facebook':
case 'fb':
if(!q) return reply('Masukkan link facebook')
if(!isUrl(q)) return reply(mess.error.Iv)
fake(mess.wait)
try{
	data = await wa.fetchJson(`https://fxc7-api.herokuapp.com/api/download/fb?apikey=Fxc7&url=` + q)
console.log(data)
	if(data.result.size.split(' MB')[0] >= 50.00){
                short = await axios.get(`https://tinyurl.com/api-create.php?url=${data.result.link}`)
	teks = `*F A C E B O O K  D O W N L O A D E R*\n\n${shp} Judul : ${data.result.judul}\n${shp} Size : ${data.result.size}\n${shp} Type : ${data.result.type}\n${shp} Link : ${short.data}\n\n${mess.oversize}`
	return wa.sendFileFromUrl(from, data.result.thumb, tod, teks)
	}
	teks = `*F A C E B O O K  D O W N L O A D E R*\n\n${shp} Judul : ${data.result.judul}\n${shp} Size : ${data.result.size}\n${shp} Type : ${data.result.type}\n\nTunggu sebentar\nMedia akan segera dikirim`
	await wa.sendFileFromUrl(from, data.result.thumb, tod, teks)
	wa.sendFileFromUrl(from, data.result.link, tod)
}catch(e){
	reply(mess.error.api)
}
break
case 'facebookaudio':
case 'fbaudio':
if(!q) return reply('Masukkan link facebook')
if(!isUrl(q)) return reply(mess.error.Iv)
fake(mess.wait)
//try{
	data = await wa.fetchJson(`https://x-restapi.herokuapp.com/api/fbdl?url=${q}&apikey=BETA`)
console.log(data)
	teks = `*F A C E B O O K  A U D I O  D O W N L O A D E R*\n\n${shp} Judul : ${data.title}]\n\nTunggu Sebentar\nAudio akan segera dikirim`
	await reply(teks)
	media = './media/fb.mp4'
	headers = getHeader()
	var writeStream = await fs.createWriteStream(media)
    request({
        uri: data.urlmp3,
        headers: headers,
        method: 'GET'
      })
      .pipe(writeStream);
 	ran = wa.getRandom('.mp4')
					exec(`ffmpeg -i ${media} ${ran}`, (err) => {
						fs.unlinkSync(media)
						if (err) return reply('Gagal, pada saat mengkonversi video ke mp3')
						buffer = fs.readFileSync(ran)
						wa.sendAudio(from, buffer, tod)
						fs.unlinkSync(ran)
					})

/*}catch(e){
	reply(mess.error.api)
}*/
break
case 'tts':
if (args.length < 1) return reply(`Cara Penggunaan : ${prefix}tts kodebahasa text\nexample : ${prefix}tts id halo`)
const gtts = require('./lib/gtts')(args[0])
if (args.length < 2) return
try{
dtt = body.slice(8)
ranm = wa.getRandom('.mp3')
rano = wa.getRandom('.ogg')
dtt.length > 300
? reply('𝘁𝗲𝗸𝘀𝗻𝘆𝗮 𝗷𝗮𝗻𝗴𝗮𝗻 𝗸𝗲𝗽𝗮𝗻𝗷𝗮𝗻𝗴𝗮𝗻')
: gtts.save(ranm, dtt, function() {
	exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {
	fs.unlinkSync(ranm)
	buff = fs.readFileSync(rano)
	if (err) return reply('𝗬𝗮𝗵 𝗴𝗮𝗴𝗮𝗹, 𝘂𝗹𝗮𝗻𝗴𝗶 𝗹𝗮𝗴𝗶 𝘆𝗮 𝘀𝗮𝘆𝗮𝗻𝗴')
	wa.sendptt(from, buff, tod)
	fs.unlinkSync(rano)
	})
})
}catch(e){
}
break
case 'mobilewallanime':
try{
	akaneko.mobileWallpapers().then(res => {
		sendMediaURL(from, res, 'Nih wallpapernya')
	})
}catch(e){
	reply(mess.error.api)
}
break
case 'wallanime':
try{
	akaneko.wallpapers().then(res => {
		sendMediaURL(from, res, 'Nih wallpapernya')
	})
}catch(e){
	reply(mess.error.api)
}
break
case 'nekonime':
try{
	akaneko.neko().then(res => {
		sendMediaURL(from, res, 'neko')
	})
}catch(e){
	reply(mess.error.api)
}
break
case 'foxnime':
try{
	akaneko.foxgirl().then(res => {
		sendMediaURL(from, res, 'Fox')
	})
}catch(e){
	reply(mess.error.api)
}
break
/*case 'ig':
case 'instagram':
if(!q) return reply('Linknya mana?')
if(!isUrl(q)) return reply('Tolong masukkan link/url dengan benar')
try{
	data = await wa.fetchJson(`https://api.zeks.xyz/api/ig?url=${q}&apikey=apivinz`)
	burn = data.result
	teks = '*「 I N S T A G R A M  D O W N L O A D E R 」*\n\n'
	for (let i of burn){
		if ( i.type == "mp4"){
			buff = await wa.getBuffer(i.url)
			wa.sendVideo(from, buff, tod, `${shp} Username : ${data.owner}\n${shp} Caption ; ${data.caption}`)
		}
		else{
			buff = await getBuffer(i.url)
			wa.sendImage(from, buff, tod, `${shp} Username : ${data.owner}\n${shp} Caption ; ${data.caption}`)
		}
	}
}catch(e){
	reply(mess.error.api)
}
break*/
case 'igstalk':
if(!q) return reply('Masukkan username instagram!')
fake(mess.wait)
try{
	data = await ig.fetchUser(q)
	console.log(data)
	teks = `*I N S T A G R A M  S T A L K*\n\n${shp} Username : ${data.username}\n${shp} Fullname : ${data.full_name}\n${shp} Followers : ${data.following}\n${shp} Following : ${data.followers}\n${shp} Verified : ${data.is_verified}\n${shp} Private : ${data.is_private}\n${shp} Biografi : ${data.biography}`
	sendMediaURL(from, data.profile_pic_url_hd, teks)
}catch(e){
	return reply(mess.error.api)
}
break
case 'tr':
if(!q) return reply(`Cara Penggunaan ${prefix}tr [kodebahasa teks]/reply pesan dengan ${prefix}tr kodebahasa\nExample : ${prefix}tr id I Love you`)
if(!args[0]) return reply(`Masukkan kode bahasanya om`)
try{
if(!args[1]){
   if(tod.message.conversation) return reply(`Cara Penggunaan ${prefix}tr [kodebahasa teks]/reply pesan dengan ${prefix}tr kodebahasa\nExample : ${prefix}tr id I Love you`)
   tra = await translate(tod.message.extendedTextMessage.contextInfo.quotedMessage.conversation, {to:args[0]})
   console.log(tra)
   reply(tra.text)
}
else{
   codelang = args[0]
   tra = await translate(body.slice(4+codelang.length), {to:codelang})
   console.log(tra)
   reply(tra.text)
}
}catch(e){
   reply(mess.error.api)
}
break
case 'asmaulhusna':
if(!q) return reply('masukkan nomor asmaul-husna!')
if(isNaN(q)) return reply('Harus berupa angka 1-99!')
if(q > 99) return reply('Harus berupa angka 1-99!')
try{
	data = await zahir.Islamic.AsmaulHusna()
	urut = q - 1
	hdata = data.data[urut]
	teks = `*AsmaulHusna*\n\n${shp} Latin : ${hdata.latin}\n${shp} Arabic : ${hdata.arabic}\n${shp} Id : ${hdata.translation_id}\n${shp} En : ${hdata.translation_en}`
	reply(teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'quranayat':
if(!q) return reply(`Penggunaan : ${prefix}quranayat nosurah|ayat\nExample : ${prefix}quranayat 1|2`)
surah = q.split('|')[0]
ayat = q.split('|')[1]
if(!ayat) return reply('Format salah!')
if(isNaN(surah)) return reply('Input harus berupa nomor surah')
if(isNaN(ayat)) return reply('Input harus berupa nomor ayat')
if(surah > 114) return reply('Al-Quran hanya terdiri dari 114 surah\nJadi surah ke ' + surah +' itu tidak ada')
try{
data2 = await zahir.Islamic.Quran(surah, 1)
data = await zahir.Islamic.Quran(surah, ayat)
hdata = data.data
hdata2 = data2.data
if(ayat > hdata2.surah.numberOfVerses) return reply(`Surah ${hdata2.surah.name.transliteration.id} hanya terdiri dari ${hdata2.surah.numberOfVerses} ayat!`)
teks = 'Surah ' + hdata.surah.name.transliteration.id + ' ayat ke ' + ayat + '\n\n' +  hdata.text.arab + '\n\n' + 'Artinya : _' + hdata.translation.id + '_'
reply(teks)
}catch{
reply('Error!, silahkan isi dengan format yang benar!')
}
break
case 'quranaudio':
if(!q) return reply(`Penggunaan : ${prefix}quranaudio nosurah|ayat\nExample : ${prefix}quranaudio 1|2`)
surah = q.split('|')[0]
ayat = q.split('|')[1]
if(!ayat) return reply('Format salah!')
if(isNaN(surah)) return reply('Input harus berupa nomor surah')
if(isNaN(ayat)) return reply('Input harus berupa nomor ayat')
if(surah > 114) return reply('Al-Quran hanya terdiri dari 114 surah\nJadi surah ke ' + surah +' itu tidak ada')
try{
data = await zahir.Islamic.Quran(surah, ayat)
data2 = await zahir.Islamic.Quran(surah, 1)
hdata2 = data2.data
if(ayat > hdata2.surah.numberOfVerses) return reply(`Surah ${hdata2.surah.name.transliteration.id} hanya terdiri dari ${hdata2.surah.numberOfVerses} ayat!`)
wa.sendFileFromUrl(from, data.data.audio.secondary[0], tod)
}catch{
reply('Error!, silahkan isi dengan format yang benar!')
}
break
case 'tafsirayat':
if(!q) return reply(`Penggunaan : ${prefix}tafsirayat nosurah|ayat\nExample : ${prefix}tafsirayat 1|2`)
surah = q.split('|')[0]
ayat = q.split('|')[1]
if(!ayat) return reply('Format salah!')
if(isNaN(surah)) return reply('Input harus berupa nomor surah')
if(isNaN(ayat)) return reply('Input harus berupa nomor ayat')
if(surah > 114) return reply('Al-Quran hanya terdiri dari 114 surah\nJadi surah ke ' + surah +' itu tidak ada')
try{
data = await zahir.Islamic.Quran(surah, ayat)
data2 = await zahir.Islamic.Quran(surah, 1)
hdata2 = data2.data
hdata = data.data
if(ayat > hdata2.surah.numberOfVerses) return reply(`Surah ${hdata2.surah.name.transliteration.id} hanya terdiri dari ${hdata2.surah.numberOfVerses} ayat!`)
teks = `T A F S I R  A Y A T\nSurah ` + hdata.surah.name.transliteration.id + ' ayat ke ' + ayat + '\n\nTAFSIR :\n' + hdata.tafsir.id.long
reply(teks)
}catch{
reply('Error!, silahkan isi dengan format yang benar!')
}
break

case 'tafsirsurah':
if(!q) return reply(`Penggunaan : ${prefix}tafsirsurah nosurah\nExample : ${prefix}tafsirsurah 1`)
surah = q.split('|')[0]
ayat = '1'
if(isNaN(surah)) return reply('Input harus berupa nomor surah')
if(surah > 114) return reply('Al-Quran hanya terdiri dari 114 surah\nJadi surah ke ' + surah +' itu tidak ada')
try{
data = await zahir.Islamic.Quran(surah, ayat)
hdata = data.data
teks = `T A F S I R  S U R A H\nSurah ` + hdata.surah.name.transliteration.id + '\n\nTAFSIR :\n' + hdata.surah.tafsir.id
reply(teks)
}catch{
reply('Error!, silahkan isi dengan format yang benar!')
}
break
case 'infosurah':
if(!q) return reply(`Penggunaan : ${prefix}infosurah nosurah\nExample : ${prefix}infosurah 1`)
if(isNaN(q)) return reply('Input harus berupa nomor surah')
if(q > 114) return reply('Al-Quran hanya terdiri dari 114 surah\nJadi surah ke ' + q +' itu tidak ada')
try{
data = await zahir.Islamic.Quran(q, 1)
hdata = data.data.surah
teks = `I N F O  S U R A H\n\n`
teks += shp + ' Nama Surah : ' + hdata.name.transliteration.id + '\n'
teks += shp + ' Arti : ' + hdata.name.translation.id + '\n'
teks += shp + ' Surah Ke : ' + hdata.number + '\n'
teks += shp + ' Jumlah Ayat : ' + hdata.numberOfVerses + '\n'
teks += shp + ' Tipe Surah : ' + hdata.revelation.id
reply(teks)
}catch{
reply(mess.error.api)
}
break
case 'kisahnabi':
if(!q) return reply('Masukkan nama nabi!')
try{
data = await zahir.Islamic.KisahNabi(q)
teks = `*K I S A H  N A B I*\n\n`
teks += shp + ' Nama : ' + data.name + '\n'
teks += shp + ' Tahun Kelahiran : ' + data.thn_kelahiran + '\n'
teks += shp + ' Usia : ' + data.usia + '\n'
teks += shp + ' Tempat : ' + data.tmp + '\n\n'
teks += data.description
wa.sendFileFromUrl(from, data.image_url, tod, teks)
}catch{
reply('Error\nPastikan input sudah benar!')
}
break
case 'hidetag':
if (!isGroupAdmins && !itsMe) return reply(mess.only.admin)
if (!arg) return fake(`Penggunaan ${prefix}hidetag teks`)
wa.hideTag(from, arg)
break
case 'tagall':
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
members_id = []
teks = `┏━⬣ Tagall By @${sender.split("@")[0]}\n┃\n`
if(q){
teks += `┃ ⬣ INFO : ${q}\n┃\n`
}
for (let mem of groupMembers) {
	teks += `┣ ${shp} @${mem.jid.split('@')[0]}\n`
	members_id.push(mem.jid)
}
teks += `┃\n`
teks += `┗━⬣ ZBOT SELFBOT`
wa.Mentions(from, teks, members_id, tod)
break
case 'stourl':
boij = isQuotedSticker ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
        owgi = await zynn.downloadMediaMessage(boij)
        datae = await imageToBase64(JSON.stringify(owgi).replace(/\"/gi, ''))
        await fs.writeFileSync(`./tourl.jpeg`,datae, 'base64')
        var imgbb = require('imgbb-uploader')
        anu = await imgbb("68cb5bee517bce4f74b0e910a5d96346", './tourl.jpeg')
        res = `${anu.display_url}`
        reply(res)
break
case 'tourl':
if(isQuotedSticker){
	boij = isQuotedSticker ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
	owgi = await zynn.downloadMediaMessage(boij)
	await fs.writeFileSync(`./tourl.jpeg`, owgi)
	var imgbb = require('imgbb-uploader')
	anu = await imgbb("68cb5bee517bce4f74b0e910a5d96346", './tourl.jpeg')
	res = `${anu.display_url}`
	reply(res)
}
else if ((isMedia && !zynn.message.videoMessage || isQuotedImage || isQuotedVideo || isQuotedSticker) && args.length == 0) {
    fake(mess.wait)
            boij = isQuotedImage || isQuotedVideo || isQuotedSticker ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
            owgi = await zynn.downloadMediaMessage(boij)
            res = await uploadImages(owgi, false)
            reply(res)
  }
  break
case 'getpic':
try{
  if(!tod.message.extendedTextMessage.contextInfo.mentionedJid[0] == ''){
   if (tod.message.extendedTextMessage === undefined || tod.message.extendedTextMessage === null) return reply('Tag orangnya!')
   var org = q.split('@')[1]
  }
  else if(!tod.message.extendedTextMessage.contextInfo.participant == ''){
   var org = tod.message.extendedTextMessage.contextInfo.participant.split('@')[0]  
}
else{
reply(`tag orangnya/reply pesan dengan caption ${prefix}getpic`)
}
   data = await zynn.getProfilePicture(org)
   console.log(data)
   buff = await wa.getBuffer(data)
   wa.sendImage(from,buff, tod)
}catch(e){
   reply('Foto profile private/Tidak ada')
}
break
case 'getstatus':
try{
  if(!tod.message.extendedTextMessage.contextInfo.mentionedJid[0] == ''){
   if (tod.message.extendedTextMessage === undefined || tod.message.extendedTextMessage === null) return reply('Tag/Reply pesan orangnya!')
   var org1 = q.split('@')[1]
  }
 else if(!tod.message.extendedTextMessage.contextInfo.participant == ''){
   var org1 = tod.message.extendedTextMessage.contextInfo.participant.split('@')[0]
  }
else{
reply(`tag orangnya/reply pesan dengan caption ${prefix}getpic`)
}

  data = await zynn.getStatus(org1)
   console.log(data)
   reply(q.split('@')[1])
   reply(`${shp} Status : ${data.status}`)
}catch(e){
   reply('Status private/Tidak ada')
}
break
case 'setfake':
if(!itsMe) return
   teks = `Silahkan pilih salah satu\n\n${shp} image\n${shp} group\n${shp} loc\n${shp} liveloc\n${shp} toko\n${shp} troli\n${shp} vn\n${shp} audio\n${shp} kontak\n\nContoh : ${prefix}setfake image`
if(!q) return fake(teks)
/*if(args[0] == 'image'){
   setting.fakerep = 'freply'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}*/
if(args[0] == 'document'){
   setting.fakerep = 'fdocu'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'troli'){
   setting.fakerep = 'troli'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'group'){
   setting.fakerep = 'fgrup'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'reply'){
   setting.fakerep = 'reply' 
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'vn'){
   setting.fakerep = 'vn'
   await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'audio'){
   setting.fakerep = 'audio'
   await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'kontak'){
   setting.fakerep = 'kontak'
   await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'kontak2'){
   setting.fakerep = 'kontak2'
   await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'kontak3'){
   setting.fakerep = 'kontak3'
   await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'loc'){
   setting.fakerep = 'loc'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'liveloc'){
   setting.fakerep = 'liveloc'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'toko'){
   setting.fakerep = 'ftoko'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else if(args[0] == 'invite'){
   setting.fakerep = 'invite'
await fs.writeFileSync('./setting.json', JSON.stringify(setting))
   fake('Sukses')
}
else{
	fake(teks)
	}
setting = await JSON.parse(fs.readFileSync('./setting.json'))
fakerep = setting.fakerep
break
case 'link':
case 'linkgc':
if(!isBotGroupAdmins) return reply(mess.only.Badmin)
gclink = await zynn.groupInviteCode(from)
reply(`https://chat.whatsapp.com/${gclink}\n\nLink Group ${groupName}`)
break
case 'join':
if(!itsMe) return
if (!q) return fake('Masukan link group')
if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) return reply(mess.Iv)
try {
	hen = args[0]
	var codeInvite = hen.split('https://chat.whatsapp.com/')[1] 
	if (!codeInvite) return fake('pastikan link sudah benar!')
	var response = await zynn.query({
	json: ["action", "invite", codeInvite],
	expect200: true
})
	fake('SUKSES JOIN GROUP')
} catch(e) {
	fake(mess.Iv)
}
break
case 'kontak':
if(!itsMe) return reply(mess.only.ownerB)
asu = q.split('|')[0]
asu2 = q.split('|')[1]
if (!asu) return fake(`Penggunaan ${prefix}kontak @tag atau nomor|nama`)
if (tod.message.extendedTextMessage != undefined){
	mentioned = tod.message.extendedTextMessage.contextInfo.mentionedJid
	wa.sendKontak(from,mentioned[0].split('@')[0], asu2, tod)
} else {
	wa.sendKontak(from,asu, asu2, tod)
}
break
case 'kontag':
if(!itsMe) return reply(mess.only.ownerB)
argz = arg.split('|')
if (!argz) return fake(`Penggunaan ${prefix}kontak @tag atau nomor|nama`)
if (tod.message.extendedTextMessage != undefined){
	mentioned = tod.message.extendedTextMessage.contextInfo.mentionedJid
	wa.hideTagKontak(from,mentioned[0].split('@')[0], argz[1])
} else {
	wa.hideTagKontak(from,argz[0], argz[1])
}
break
case 'graffiti':
if(!q) return reply('Masukkan teks!')
fake(mess.wait)
try{
	data = await zrapi.textpro('https://textpro.me/create-wonderful-graffiti-art-text-effect-1011.html', [q])
	sendMediaURL(from, data)
}catch(e){
	reply(mess.error.api)
}
break
case 'neon':
if(!q) return reply('Masukkan teks!')
fake(mess.wait)
try{
	data = await zrapi.textpro('https://textpro.me/create-a-futuristic-technology-neon-light-text-effect-1006.html', [q])
	sendMediaURL(from, data)
}catch(e){
	reply(mess.error.api)
}
break
case 'blackpink':
if(!q) return reply('Masukkan teks!')
fake(mess.wait)
try{
	data = await zrapi.textpro('https://textpro.me/create-blackpink-logo-style-online-1001.html', [q])
	sendMediaURL(from, data)
}catch(e){
	reply(mess.error.api)
}
break
case 'blood':
if(!q) return reply('Masukkan teks!')
fake(mess.wait)
try{
	data = await zrapi.textpro('https://textpro.me/blood-text-on-the-frosted-glass-941.html', [q])
	sendMediaURL(from, data)
}catch(e){
	reply(mess.error.api)
}
break
case 'papercut':
if(!q) return reply('Masukkan teks!')
fake(mess.wait)
try{
	data = await zrapi.textpro('https://textpro.me/create-art-paper-cut-text-effect-online-1022.html', [q])
	sendMediaURL(from, data)
}catch(e){
	reply(mess.error.api)
}
break
case 'leaves':
if(!q) return reply('Masukkan teks!')
fake(mess.wait)
try{
        data = await zrapi.textpro('https://textpro.me/natural-leaves-text-effect-931.html', [q])
        sendMediaURL(from, data)
}catch(e){
        reply(mess.error.api)
}
break
case 'ttp':
if(!q) return reply('Masukkan teksnya!')
try{
	wa.sendStickerFromUrl(from, `https://api-yogipw.herokuapp.com/api/maker/ttp?text=${encodeUrl(q)}`, tod)
}catch(e){
	reply(mess.error.api)
}
break
case 'ttp2':
if(!q) return reply('Masukkan teksnya!')
try{
	await wa.sendStickerFromUrl(from, `https://xteam.xyz/ttp?file&text=${encodeUrl(q)}`, tod)
}catch(e){
	reply(mess.error.api)
}
break
case 'attp':
if(!q) return reply('Masukkan teksnya!')
try{
	buff = await wa.getBuffer(`https://xteam.xyz/attp?file&text=${encodeUrl(q)}`)
	wa.sendSticker(from, buff, tod)
}catch(e){
	reply(mess.error.api)
}
break
case 'welcome':
if (!isGroup) return reply(mess.OnlyGrup)
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
if (args.length < 1) return reply('𝗜𝘆𝗮 𝘀𝗮𝘆𝗮𝗻𝗴')
if (args[0] == 'on') {
	if (welkom.includes(from)) return reply('𝘀𝘂𝗱𝗮𝗵 𝗮𝗸𝘁𝗶𝗳!!!')
	welkom.push(from)
	fs.writeFileSync('./src/welkom.json', JSON.stringify(welkom))
	reply('_Sukses mengaktifkan Welcome digroup ini_')
} else if (args[0] == 'off') {
	let off = welkom.indexOf(from)
	welkom.splice(off, 1)
	fs.writeFileSync('./src/welkom.json', JSON.stringify(welkom))
	reply('_Sukses menonaktifkan Welcome digroup ini_')
} else {
	reply(`_Kirim perintah on untuk mengaktifkan, off untuk menonaktifkan_\nContoh ${prefix}welcome on`)
}
break
case 'picdetec':
if(!itsMe) return
if(args[0] == 'on'){
setting.picdetec = true
await fs.writeFileSync('./setting.json',JSON.stringify(setting))
reply('Sukses')
}
else if(args[0] == 'off'){
setting.picdetec = false
await fs.writeFileSync('./setting.json',JSON.stringify(setting))
reply('Sukses')
}
else{
reply('Format salah')
}
break
case 'left':
if(!itsMe && !isGroupAdmins) return reply(mess.only.admin)
if (!isGroup) return reply(mess.OnlyGrup)
if (args.length < 1) return reply('𝗜𝘆𝗮 𝘀𝗮𝘆𝗮𝗻𝗴')
if (args[0] == 'on') {
	if (left.includes(from)) return reply('𝘀𝘂𝗱𝗮𝗵 𝗮𝗸𝘁𝗶𝗳!!!')
	left.push(from)
	fs.writeFileSync('./src/left.json', JSON.stringify(left))
	reply('_Sukses mengaktifkan left digroup ini_')
} else if (args[0] == 'off') {
	let off = left.indexOf(from)
	left.splice(off, 1)
	fs.writeFileSync('./src/left.json', JSON.stringify(left))
	reply('_Sukses menonaktifkan left digroup ini_')
} else {
	reply(`_Kirim perintah on untuk mengaktifkan, off untuk menonaktifkan_\nContoh ${prefix}left on`)
}
break
case 'group':
if(!isGroupAdmins) return
				let po = zynn.prepareMessageFromContent(from, {
					"listMessage":{
                  "title": "*Z-BOT*",
                  "description": "pilh open/close",
                  "buttonText": "COMMANDS",
                  "listType": "SINGLE_SELECT",
                  "sections": [
                     {
                        "rows": [
                           {
                              "title": "OPEN",
                              "rowId": ``
                           },
			{
                              "title": 'CLOSE,
                              "rowId": ``
                           },
			 {
                              "title": "WELCOMEON",
                              "rowId": ``
                           },
			 {
                              "title": "WELCOMEOFF",
                              "rowId": ``
                           },
			 {
                              "title": "LEFTON",
                              "rowId": ``
                           },
			 {
                              "title": "LEFTOFF",
                              "rowId": ``
                           }
                        ]
                     }]}}, {}) 
            zynn.relayWAMessage(po, {waitForAck: true})
			
break
case 'surah':
if(!q) return reply('Masukkan nomor surah!')
if(isNaN(q)) return reply('Input harus berupa angka!')
try{
	data = await hx.surah(q)
	data2 = await zahir.Islamic.Quran(q, 1)
	hdata = data2.data
	teks = shp + ` *Surah ${hdata.surah.name.transliteration.id} Ayat 1 - ${data.length}\n\n`
	num = 1
	for(let i of data){
		teks += num + '.  ' + i.arab + '\n\n'
		teks += '_Artinya : ' + i.indo + '_\n\n------------------------------\n\n'
		num += 1
	}
	reply(teks)
}catch{
	reply(mess.error.api)
}
break
case 'playstore':
if(!q) return reply('Masukkan kata kuncinya!')
fake(mess.wait)
try{
	data = await hx.playstore(q)
	teks = `*P L A Y S T O R E  S E A R C H*\n${shp} Query : ${q}\n\n`
	for(let i of data){
		teks += shp + ' Nama : ' + i.name + '\n'
		teks += shp + ' Link : ' + i.link + '\n'
		teks += shp + ' Developer : ' + i.developer + '\n'
		teks += shp + ' Link Developer : ' + i.link_dev + '\n\n------------------------------\n\n'
	}
	reply(teks)
}catch{
	reply(mess.error.api)
}
break
case 'ig2':
if(!q) return reply('Masukkan linknya!')
if(!isUrl(q)) return reply(mess.error.Iv)
fake(mess.wait)
try{
	data = await hx.igdl(q)
	for(let i of data){
		await wa.sendFileFromUrl(from, i.downloadUrl, tod)
		await wa.sleep(3000)
	}
}catch{
	reply(mess.errer.api)
}
break
case 'igstory':
if(!q) return reply(`Cara penggunaan : ${prefix}igstory username|jumlah\nContoh ; ${prefix}igstory n.lidiawaty|2`)
usrnm = q.split('|')[0]
jmlh = q.split('|')[1]
if(!jmlh) return reply('Format salah')
if(isNaN(jmlh)) return reply('Jumlah harus berupa angka!')
fake(mess.wait)
try{
	data = await hx.igstory(usrnm)
	if(jmlh > data.length) return reply(`Jumlah yang anda minta terlalu berlebihan!\nStory ${usrnm} hanya berjumlah ${data.length}`)
	num = 1
	for(let i=0; i<jmlh; i++){
		teks = `Igstory ${usrnm} ${num}`
		num += 1
		await wa.sendFileFromUrl(from, data[i].downloadUrl, tod, teks)
		await wa.sleep(3000)
	}
}catch{
	reply(mess.error.api)
}
break
case 'twittervideo':
if(!q) return reply('Masukkan linknya!')
if(!isUrl(q)) return reply(mess.error.Iv)
fake(mess.wait)
try{
	data = await hx.twitter(q)
	await wa.sendFileFromUrl(from, data.SD, tod, data.desc)
}catch{
	reply(mess.error.api)
}
break
case 'tiktok2':
if(!q) return reply('Masukkan linknya!')
if(!isUrl(q)) return reply(mess.error.Iv)
fake(mess.wait)
try{
	data = await hx.ttdownloader(q)
	await wa.sendFileFromUrl(from, data.wm, tod, '*T I K T O K  W A T E R M A R K*')
}catch{
	reply(mess.error.api)
}
break
case 'tiktoknowm2':
if(!q) return reply('Masukkan linknya!')
if(!isUrl(q)) return reply(mess.error.Iv)
fake(mess.wait)
try{
	data = await hx.ttdownloader(q)
	await wa.sendFileFromUrl(from, data.nowm, tod, '*T I K T O K  N O  W A T E R M A R K*')
}catch{
	reply(mess.error.api)
}
break
case 'konachan':
if(!q) return reply('Masukkan kata kuncinya!')
fake(mess.wait)
try{
	data = await skrep.konachan(q)
	if(data == '') return reply(`Gambar ${q} tidak ditemukan`)
	rand = data[Math.floor(Math.random() * data.length)]
	wa.sendFileFromUrl(from, rand, tod, `Hasil Pencarian : ${q}`)
}catch{
	reply(mess.error.api)
}
break
case 'ghuser':
case 'githubuser':
if(!q) return reply('Masukkan username githubnya!')
fake(mess.wait)
try{
	data = await skrep.ghuser(q)
	teks = `*G I T H U B  U S E R  S E A R C H*\n${shp} Query : ${q}\n\n`
	for(let i of data){
		teks += shp + ' Username : ' + i.name + '\n'
		teks += shp + ' Link : ' + i.link + '\n\n------------------------------\n\n' 
	}
	wa.sendFileFromUrl(from, data[0].thumb, tod, teks)
}catch{
	reply(mess.error.api)
}
break
case 'ghfollowers':
case 'ghfol':
if(!q) return reply('Masukkan username githubnya!')
fake(mess.wait)
try{
	data = await skrep.ghfollower(q)
	teks = `*F O L L O W E R S  G I T H U B*\n\n${shp} Username : ${data.username}\n${shp} Followers : ${data.followers}\n\n*L I S T  F O L L O W E R S* : \n\n`
	for(let i of data.listfollowers){
		teks += shp + ' Username : ' + i.username + '\n'
		teks += shp + ' Link : ' + i.link + '\n\n------------------------------\n\n' 
	}
	wa.sendFileFromUrl(from, data.avatar, tod, teks)
}catch{
	reply(mess.error.api)
}
break
case 'setwelcome':
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
if(!q) return reply(`Contoh penggunaan : ${prefix}setwelcome Halo @user, Selamat datang di Group @subject\n\nInfo : \n${shp} @user = Tag Member\n${shp} @subject = Nama Group\n${shp} @desc = deskripsi group`)
for(let i of welkam){
  if(from.includes(i.idgc)){
    let del = welkam.indexOf(i)
      welkam.splice(del, 1)
      await fs.writeFileSync('./src/welkam.json', JSON.stringify(welkam))
      welkamgc = {
idgc : from,
textwel : q
}
    welkam.push(welkamgc)
      fs.writeFileSync('./src/welkam.json', JSON.stringify(welkam))
      return reply(`Welcome Group diubah menjadi ${q}`)
    }
}
welkamgc = {
idgc : from,
textwel : q
}
welkam.push(welkamgc)
fs.writeFileSync('./src/welkam.json', JSON.stringify(welkam))
reply(`Welcome Group diubah menjadi ${q}`)
break
case 'delwelcome':
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
for(let i of welkam){
if(from.includes(i.idgc)){
   let del = welkam.indexOf(i)
   welkam.splice(del, 1)
   fs.writeFileSync('./src/welkam.json', JSON.stringify(welkam))
   reply(`Sukses Menghapus welcome di group ini`)
}
}
break
case 'setleft':
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
if(!q) return reply(`Contoh penggunaan : ${prefix}setleft Sayonara @user, Semoga Tenang dialam sana\n\nInfo : \n${shp} @user = Tag Member\n${shp} @subject = Nama Group\n${shp} @desc = deskripsi group`)
for(let i of tleft){
  if(from.includes(i.idgc)){
    let del = tleft.indexOf(i)
      tleft.splice(del, 1)
      await fs.writeFileSync('./src/tleft.json', JSON.stringify(tleft))
      tleftgc = {
idgc : from,
textleft : q
}
    tleft.push(tleftgc)
      fs.writeFileSync('./src/tleft.json', JSON.stringify(tleft))
      return reply(`Left Group diubah menjadi ${q}`)
    }
}
tleftgc = {
idgc : from,
textleft : q
}
tleft.push(tleftgc)
fs.writeFileSync('./src/tleft.json', JSON.stringify(tleft))
reply(`Left Group diubah menjadi ${q}`)
break
case 'delleft':
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
for(let i of tleft){
if(from.includes(i.idgc)){
   let del = tleft.indexOf(i)
   tleft.splice(del, 1)
   fs.writeFileSync('./src/tleft.json', JSON.stringify(tleft))
   reply(`Sukses Menghapus Left di group ini`)
}
}
break
case 'cekwelcome':
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
for(let i of welkam){
    if(i.idgc.includes(from)){
        teks = `${shp} Nama Group : ${groupName}\n${shp} Id : ${i.idgc}\n${shp} Text Welcome :\n${i.textwel}`
        return reply(teks)
    }
}
teks = `${shp} Nama Group : ${groupName}\n${shp} Id : ${from}\n${shp} Text Welcome : Default Bot`
reply(teks)
break
case 'cekleft':
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
for(let i of tleft){
    if(i.idgc.includes(from)){
        teks = `${shp} Nama Group : ${groupName}\n${shp} Id : ${i.idgc}\n${shp} Text Left :\n${i.textleft}`
        return reply(teks)
    }
}
teks = `${shp} Nama Group : ${groupName}\n${shp} Id : ${from}\n${shp} Text Left : Default Bot`
reply(teks)
break
case 'ssweb':
if(!q) return reply('Masukkan urlnya!')
fake(mess.wait)
try{
	sendMediaURL(from, `https://api.apiflash.com/v1/urltoimage?access_key=5608da775fec43ccab391d3ed75484ba&url=${q}`, `SSWEB : ${q}`)
}catch(e){
	reply(mess.error.api)
}
break
case 'revokelink':
case 'resetlink':
if(!itsMe && !isGroupAdmins) return reply(mess.only.admin)
if(!isBotGroupAdmins) return reply(mess.only.Badmin)
y = await zynn.query({json: ["action", "inviteReset", from],expect200: true})
reply('sukses revoke link')
break
case 'otakudesu':
if(!q) return reply('Masukkan judulnya!')
fake(mess.wait)
try{
	data = await Ra.OtakudesuSearch(q)
	data2 = await Ra.InfoOtakudesu(data.result[0].url)
	teks = `*I N F O  A N I M E*\n\n${shp} Bio : \n${data2.result.bio}\n${shp} Sinopsis : ${data2.result.sinopsis}\n${shp} Url : ${data.result[0].url}`
	sendMediaURL(from, data2.result.thumb, teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'antidelete':
const groupId = isGroup ? groupMetadata.jid : ''
const dataRevoke = JSON.parse(fs.readFileSync('./src/gc-revoked.json'))
const dataCtRevoke = JSON.parse(fs.readFileSync('./src/ct-revoked.json'))
const dataBanCtRevoke = JSON.parse(fs.readFileSync('./src/ct-revoked-banlist.json'))
const isRevoke = dataRevoke.includes(from)
const isCtRevoke = dataCtRevoke.data
const isBanCtRevoke = dataBanCtRevoke.includes(sender) ? true : false
            //const argz = arg.split(' ')
if (args.length < 1) return zynn.sendMessage(from, `Penggunaan fitur antidelete :\n\n${prefix}antidelete [on/off]`, MessageType.text)
if (args[0] == 'on') {           
if (isGroup) {
	if (!tod.key.fromMe && !isGroupAdmins) return reply('Hanya Bisa dilakukan Oleh admin Group')
	if (isRevoke) return zynn.sendMessage(from, `Antidelete telah diaktifkan di grup ini sebelumnya!`, MessageType.text)
	dataRevoke.push(from)
	fs.writeFileSync('./src/gc-revoked.json', JSON.stringify(dataRevoke))
	zynn.sendMessage(from, `Succes Enable Antidelete Grup!`, MessageType.text, {quoted: tod})
} else if (!isGroup) {
	zynn.sendMessage(from, `Untuk kontak penggunaan ${prefix}antidelete ctaktif`, MessageType.text)
}
} else if (args[0] == 'ctaktif') {
if (!isGroup) {
	if (!tod.key.fromMe) return reply('Hanya Bisa dilakukan Oleh Owner')
	if (isCtRevoke) return zynn.sendMessage(from, `Antidelete telah diaktifkan di semua kontak sebelumnya!`, MessageType.text)
	dataCtRevoke.data = true
	fs.writeFileSync('./src/ct-revoked.json', JSON.stringify(dataCtRevoke))
	zynn.sendMessage(from, `Antidelete diaktifkan disemua kontak!`, MessageType.text, {quoted: tod})
} else if (isGroup) {
        zynn.sendMessage(from, `Untuk grup penggunaan ${prefix}antidelete aktif`, MessageType.text)
}
} else if (args[0] == 'banct') {
	if (!itsMe) return reply('Hanya Bisa dilakukan Oleh Owner')
	if (isBanCtRevoke) return zynn.sendMessage(from, `kontak ini telah ada di database banlist!`, MessageType.text)
	if (args.length === 2 || args[2].startsWith('0')) return benny.sendMessage(from, `Masukan nomer diawali dengan 62! contoh 62859289xxxxx`, MessageType.text)
	dataBanCtRevoke.push(args[2] + '@s.whatsapp.net')
	fs.writeFileSync('./src/ct-revoked-banlist.json', JSON.stringify(dataBanCtRevoke))
	zynn.sendMessage(from, `Kontak ${args[2]} telah dimasukan ke banlist antidelete secara permanen!`, MessageType.text)
} else if (args[0] == 'off') {
if (isGroup) {
	if (!tod.key.fromMe && !groupAdmins) return reply('Hanya Bisa dilakukan Oleh admin Group')
	if (!isRevoke) return reply('Anti delete sudah di nonaktifkan')
	const index = dataRevoke.indexOf(from)
	dataRevoke.splice(index, 1)
	fs.writeFileSync('./src/gc-revoked.json', JSON.stringify(dataRevoke))
	zynn.sendMessage(from, `Succes disable Antidelete Grup!`, MessageType.text)
} else if (!isGroup) {
	zynn.sendMessage(from, `Untuk kontak penggunaan ${prefix}antidelete ctmati`, MessageType.text)
}
} else if (args[0] == 'ctmati') {
if (!isGroup) {
	if (!tod.key.fromMe) return reply('Hanya Bisa dilakukan Oleh Owner')
	dataCtRevoke.data = false
	fs.writeFileSync('./src/ct-revoked.json', JSON.stringify(dataCtRevoke))
	zynn.sendMessage(from, `Antidelete dimatikan disemua kontak!`, MessageType.text)
} else if (isGroup) {
	zynn.sendMessage(from, `Untuk grup penggunaan ${prefix}antidelete mati`, MessageType.text)
}
}
break
    case 'tourl2':
 if ((isMedia && !zynn.message.videoMessage || isQuotedImage || isQuotedVideo || isQuotedSticker || isQuotedAudio || isQuotedDocument) && args.length == 0) {
    fake(mess.wait)
    boij = isQuotedImage || isQuotedVideo || isQuotedSticker || isQuotedAudio || isQuotedDocument? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
owgi = await zynn.downloadMediaMessage(boij)
rname = await GenerateSerialNumber('000000')
        if(isQuotedImage){
        await fs.writeFileSync(`./media/${rname}.jpg`, owgi)
        path = `./media/${rname}.jpg`
        uplod = await Ra.UploadFile(path)
        console.log(uplod)
	teks = `M E D I A  T O  U R L\n\n${shp} Nama File : ${uplod.result.url}\n${shp} Type : Image/jpg\n${shp} Url : ${uplod.result.namaFile}\n${shp} Size : ${uplod.result.size}\n${shp} Hash : ${uplod.result.hash}`
	reply(teks)
	fs.unlinkSync(path)
        }
        else if(isQuotedVideo){
        await fs.writeFileSync(`./media/${rname}.mp4`, owgi)
        path = `./media/${rname}.mp4`
        uplod = await Ra.UploadFile(path)
        console.log(uplod)
        teks = `M E D I A  T O  U R L\n\n${shp} Nama File : ${uplod.result.url}\n${shp} Type : Video/mp4\n${shp} Url : ${uplod.result.namaFile}\n${shp} Size : ${uplod.result.size}\n${shp} Hash : ${uplod.result.hash}`
        reply(teks)
        fs.unlinkSync(`./media/${rname}.mp4`)
        }
        else if(isQuotedSticker){
        await fs.writeFileSync(`./media/${rname}.webp`, owgi)
        path = `./media/${rname}.webp`
        uplod = await Ra.UploadFile(path)
        console.log(uplod)
        teks = `M E D I A  T O  U R L\n\n${shp} Nama File : ${uplod.result.url}\n${shp} Type : Sticker/webp\n${shp} Url : ${uplod.result.namaFile}\n${shp} Size : ${uplod.result.size}\n${shp} Hash : ${uplod.result.hash}`
        reply(teks)
        fs.unlinkSync(path)
        }
        else if(isQuotedAudio){
        await fs.writeFileSync(`./media/${rname}.mp3`, owgi)
        path = `./media/${rname}.mp3`
        uplod = await Ra.UploadFile(path)
        console.log(uplod)
        teks = `M E D I A  T O  U R L\n\n${shp} Nama File : ${uplod.result.url}\n${shp} Type : Audio/mp3\n${shp} Url : ${uplod.result.namaFile}\n${shp} Size : ${uplod.result.size}\n${shp} Hash : ${uplod.result.hash}`
        reply(teks)
        fs.unlinkSync(path)
        }
	else{
	reply(`Reply Image/Sticker/Video/Audio dengan caption ${prefix}tourl2`)
	}
}
 break
case 'qrcode':
if(!q) return reply('Masukkan teksnya!')
await fake(mess.wait)
try{
qrcod = require('qrcode')
data = await qrcod.toDataURL(q)
//console.log(y)
buff = await Buffer.from(data.split('data:image/png;base64,')[1], 'base64')
wa.sendImage(from, buff, tod)
}catch{
reply(mess.error.api)
}
break
case 'qrreader':
if(isQuotedImage){
boij = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
        owgi = await zynn.downloadMediaMessage(boij)
        await fs.writeFileSync(`./media/qr.jpeg`, owgi)
        var imgbb = require('imgbb-uploader')
        anu = await imgbb("68cb5bee517bce4f74b0e910a5d96346", './media/qr.jpeg')
        res = `${anu.display_url}`
        data = await wa.fetchJson(`https://docs-jojo.herokuapp.com/api/qr_read?image_url=${res}`)
	teks = `Q R  R E A D E R\n\n${shp} Result : ${data.result.raw_text}`
	reply(teks)
	//fs.unlinkSync('./media/qr.jpeg')
}else{
reply('Reply qrcodenya')
}
break
case 'carigc':
if(!q) return reply('Mau cari grup apa?')
fake(mess.wait)
try{
	data = await skrep.carigc(q)
	teks = `C A R I  G R O U P\n${shp} Query : ${q}\n\n`
	for(let i of data){
		teks += shp + ` Nama Group : ` + i.nama + '\n'
		teks += shp + ` Link Group : ` + i.link + '\n\n-------------------------------\n\n'
	}
	reply(teks)
}catch(e){
	reply(mess.error.api)
}
break
case 'wall':
case 'wallpaper':
if(!q) return reply('Masukkan kata kunci!')
fake(mess.wait)
try{
	data = await skrep.wallpapercave(q)
	rand = Math.floor(Math.random() * data.length) + 1
	wa.sendFileFromUrl(from, data[rand], tod, "nih Wallpapernya")
}catch{
	reply(mess.error.api)
}
break
case 'wattpad':
if(!q) return reply('Masukkan kata kunci!')
fake(mess.wait)
try{
	data = await skrep.wattpad(q)
	teks = `W A T T P A D  S E A R C H\n${shp} Query : ${q}\n\n`
	for(let i of data){
		teks += shp + ' Judul : ' + i.creator + '\n'
		teks += shp + ' Link : ' + i.link + '\n\n------------------------------\n\n'
	}
	wa.sendFileFromUrl(from, data[0].thumb, tod, teks)
}catch{
	reply(mess.error.notfound)
}
break
case 'sfilesearch':
case 'sfile':
if(!q) return reply('Masukkan kata kunci')
fake(mess.wait)
try{
	data = await skrep.sfilesearch(q)
	teks = `S F I L E  S E A R C H\n${shp} Query : ${q}\n\n`
	for(let i of data){
		teks += shp + ' Judul : ' + i.nama + '\n'
		teks += shp + ' Size : ' + i.size + '\n'
		teks += shp + ' Link : ' + i.link + '\n\n------------------------------\n\n'
	}
	reply(teks)
}catch{
	reply(mess.error.notfound)
}
break
case 'dewabatch':
if(!q) return reply('Masukkan kata kunci!')
fake(mess.wait)
try{
	data = await skrep.dewabatch(q)
	teks = `D E W A B A T C H  S E A R C H\n${shp} Query : ${q}\n\n`
	for(let i of data){
		teks += shp + ' Judul : ' + i.judul + '\n'
		teks += shp + ' Rating : ' + i.rating + '\n'
		teks += shp + ' Link : ' + i.link + '\n\n------------------------------\n\n'
	}
	wa.sendFileFromUrl(from, data[0].thumb, tod, teks)
}catch{
	reply(mess.error.notfound)
}
break
case 'kiryu':
if(!q) return reply('Masukkan kata kunci!')
fake(mess.wait)
try{
	data = await skrep.kiryu(q)
	teks = `K I R Y U  S E A R C H\n${shp} Query : ${q}\n\n`
	for(let i of data){
		teks += shp + ' Judul : ' + i.judul + '\n'
		teks += shp + ' Rating : ' + i.rating + '\n'
		teks += shp + ' Link : ' + i.link + '\n\n------------------------------\n\n'
	}
	wa.sendFileFromUrl(from, data[0].thumb, tod, teks)
}catch{
	reply(mess.error.notfound)
}
break
case 'palingmurah':
if(!q) return reply('Masukkan kata kuncinya!')
fake(mess.wait)
try{
    data = await skrep.palingmurah(q)
    teks = `*P A L I N G  M U R A H*\n${shp} Query : ${q}\n\n`
    for(let i of data){
        teks += shp + ' Produk : ' + i.product + '\n'
        teks += shp + ' Harga : ' + i.price + '\n'
        teks += shp + ' Deskripsi : ' + i.product_desc + '\n'
        teks += shp + ' Url : ' + i.product_url + '\n\n----------------------------------\n\n'
    }
    wa.sendFileFromUrl(from, data[0].product_image, tod, teks)
}catch{
    reply('Produk tidak ditemukan/error!')
}
break
case 'mangatoon':
if(!q) return reply('Masukkan kata kuncinya!')
fake(mess.wait)
try{
    data = await skrep.mangatoon(q)
    teks = `*M A N G A T O O N*\n${shp} Query : ${q}\n\n`
    for(let i of data){
        teks += shp + ' Judul : ' + i.comic_name + '\n'
        teks += shp + ' Genre : ' + i.comic_type + '\n'
        teks += shp + ' Url : ' + i.comic_url + '\n\n----------------------------------\n\n'
    }
    wa.sendFileFromUrl(from, data[0].comic_thumb, tod, teks)
}catch{
    reply('Komik tidak ditemukan/error!')
}
break
case 'infocovid':
if(!q){
data = await skrep.corona('indonesia')
}
else{
data = await skrep.corona(q)
}
console.log(data.status)
if(data.status == 'error') return reply('Negara tidak ditemukan!')
teks = `*I N F O  C O V I D*\n${shp} Negara : ${data.negara}\n\n`
teks += shp + ` Total Kasus : ` + data.total_kasus + '\n'
teks += shp + ` Total Meninggal : ` + data.total_kematian + '\n'
teks += shp + ` Total Sembuh : ` + data.total_sembuh + '\n'
reply(teks)
break
case 'snobg':
 if (isQuotedSticker) {
    fake(mess.wait)
const encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
const media = await zynn.downloadAndSaveMediaMessage(encmedia)
ran = await wa.getRandom('.png')
exec(`ffmpeg -i ${media} ${ran}`,async (err) => {
	fs.unlinkSync(media)
	if (err) {
	reply(`gagal`)
	//fs.unlinkSync(ran)
} else {
	console.log('sukses')
path = ran
rbg = await removeBackgroundFromImageFile({
  path: path,
  apiKey: "F3wZAdCbRH8J3fPdq5oNHfri",
  size: "regular",
  type: "auto",
  scale: "100%",
  path 
})
console.log(rbg)
await fs.unlinkSync(path)
buff = await Buffer.from(rbg.base64img, 'base64')
await fs.writeFileSync(path, buff)
await createSticker(path, sender, command)
}
})
}
break
case 'tagme':
zynn.sendMessage(from, `@${sender.replace("@s.whatsapp.net","")}`, MessageType.text, {contextInfo: {mentionedJid: [sender]}, quoted: tod})
break
case 'film':
if(!q) return reply('Mau cari film apa?')
fake(mess.wait)
try{
	data = await Ra.SearchFilm(q)
	teks = `C A R I  F I L M\n\n`
	for(let i of data){
		teks += shp + ' Judul : ' + i.judul + '\n'
		teks += shp + ' Kualitas : ' + i.quality + '\n'
		teks += shp + ' Link : ' + i.link + '\n\n-----------------------------\n\n'
	}
wa.sendFileFromUrl(from, data[0].thumb, tod, teks)
}catch(e){
reply(mess.error.api)
}
break
case 'wa.me':
teks = `wa.me/${sender.replace("@s.whatsapp.net","")}`
reply(teks)
break
case 'mute':
if(!itsMe) return
if(!isGroup) return
if(mute.includes(from)) return reply('Bot telah dimute di Group ini sebelumnya!')
mute.push(from)
fs.writeFileSync('./src/mute.json', JSON.stringify(mute))
reply('Sukses Mute Bot')
break
case 'unmute':
if(!itsMe) return
if(!isGroup) return
if(!mute.includes(from)) return reply('Bot tidak dimute pada chat ini!')
del = mute.indexOf(from)
mute.splice(del, 1)
fs.writeFileSync('./src/mute.json', JSON.stringify(mute))
reply('Sukses Unmute Bot')
break
case 'waifu':
fake(mess.wait)
try{
	rand = Math.floor(Math.random() * 100) + 1
console.log(rand)
	if(rand < 100){
		rand = '0' + rand
	}
	wa.sendFileFromUrl(from, 'http://randomwaifu.altervista.org/images/0' + rand + '.png', tod, 'Nih waifu')
}catch{
	reply(mess.error.api)
}
break
case 'meme':
dmeme = JSON.parse(fs.readFileSync('./src/meme.json'))
rand = Math.floor(Math.random() * dmeme.length) + 1
console.log(dmeme[rand])
wa.sendFileFromUrl(from, dmeme[rand], tod)
break
case 'ppcouple':
ppcp = JSON.parse(fs.readFileSync('./src/ppcouple.json'))
rand = Math.floor(Math.random() * ppcp.length) + 1
wa.sendFileFromUrl(from, ppcp[rand].male, tod, 'COWO')
wa.sendFileFromUrl(from, ppcp[rand].female, tod, 'CEWE')
break
case 'drakor':
if(!q) return reply('Masukkan kata kuncinya!')
fake(mess.wait)
try{
	data = await skrep.drakor(q)
	teks = `D R A K O R  S E A R C H\n${shp} Query : ${q}\n\n`
	for(let i of data){
		teks += shp + ' Judul : ' + i.judul + '\n'
		teks += shp + ' Link : ' + i.link + '\n\n------------------------------\n\n'
	}
	wa.sendFileFromUrl(from, data[0].thumb, tod, teks)
}catch{
	reply('Drakor tidak ditemukan/error!')
}
break
case 'artinama':
if(!q) return reply('Namanya siapa?')
try{
	data = await skrep.artinama(q)
	reply(data)
}catch{
	reply(mess.error.api)
}
break
case 'mediafire':
if(!q) return reply('Masukkan linknya!')
if(!isUrl(q)) return reply(mess.error.Iv)
fake(mess.wait)
try{
	data = await skrep.mediafire(q)
	teks = `M E D I A F I R E  D I R E C T\n\n`
	teks += shp + ' Nama : ' + data.judul + '\n'
		teks += shp + ' Size : ' + data.size + '\n'
	teks += shp + ' Tanggal Upload : ' + data.upload_date + '\n'
	teks += shp + ' Link Direct : ' + data.link
	reply(teks)
}catch{
	reply(mess.error.api)
}
break
case 'detector':
           if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
               if (!isGroup) return reply(mess.only.group)
               if (args.length < 1) return reply('𝗜𝘆𝗮 𝘀𝗮𝘆𝗮𝗻𝗴')
               if (args[0] == 'on') {
                  if (gchange.includes(from)) return reply('𝘀𝘂𝗱𝗮𝗵 𝗮𝗸𝘁𝗶𝗳!!!')
                  gchange.push(from)
                  fs.writeFileSync('./src/gupdated.json', JSON.stringify(gchange))
                  reply('_Sukses mengaktifkan Group Update Detector digroup ini_')
               } else if (args[0] == 'off') {
                 let off = gchange.indexOf(from)
                  gchange.splice(off, 1)
                  fs.writeFileSync('./src/gupdated.json', JSON.stringify(gchange))
                  reply('_Sukses menonaktifkan Group Update Detector digroup ini_')
               } else {
                  reply(`_Kirim perintah on untuk mengaktifkan, off untuk menonaktifkan_\nContoh ${prefix}detector on`)
               }
               break
case 'addnote':
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
try{
if(tod.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage && tod.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage) return
}catch(e){
}
nmanote = []
nnote = q.split('|')[0]
isi = q.split('|')[1]
for(let i of note){
	if(from.includes(i.groupId)){
		nmanote.push(i.namanote)
}
}
console.log(nmanote)
for(let j of nmanote){
	if(nnote.includes(j)) return reply(`Note dengan nama ${q} sudah ada didatabase`)
}
if ((isMedia && !zynn.message.videoMessage || isQuotedImage || isQuotedVideo || isQuotedAudio)) {
fake(mess.wait)
boij = isQuotedImage || isQuotedVideo || isQuotedAudio ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
owgi = await zynn.downloadMediaMessage(boij)
rname = await GenerateSerialNumber('000000')
if(isQuotedImage){
await fs.writeFileSync(`./media/${rname}.jpg`, owgi)
path = `./media/${rname}.jpg`
uplod = await Ra.UploadFile(path)
fs.unlinkSync(path)
console.log(uplod)
	const addnote = {
		groupId : from,
		creator : sender,
		namanote : nnote,
		date : date,
		type : 'image',
		media : uplod.result.namaFile,
		caption : isi
	}
note.push(addnote)
fs.writeFileSync('./src/notes.json', JSON.stringify(note))
reply(`Sukses Menambahkan Note\nKetik ${prefix}listnotes untuk mengecek`)
}
else if(isQuotedVideo){
	await fs.writeFileSync(`./media/${rname}.mp4`, owgi)
path = `./media/${rname}.mp4`
uplod = await Ra.UploadFile(path)
fs.unlinkSync(path)
console.log(uplod)
	const addnote = {
		groupId : from,
		creator : sender,
		namanote : nnote,
		date : date,
		type : 'video',
		media : uplod.result.namaFile,
		caption : isi
	}
note.push(addnote)
fs.writeFileSync('./src/notes.json', JSON.stringify(note))
reply(`Sukses Menambahkan Note\nKetik ${prefix}listnotes untuk mengecek`)
}
else if(isQuotedAudio){
	await fs.writeFileSync(`./media/${rname}.mp3`, owgi)
path = `./media/${rname}.mp3`
uplod = await Ra.UploadFile(path)
fs.unlinkSync(path)
console.log(uplod)
	const addnote = {
		groupId : from,
		creator : sender,
		namanote : nnote,
		date : date,
		type : 'audio',
		media : uplod.result.namaFile,
		caption : isi
	}
note.push(addnote)
fs.writeFileSync('./src/notes.json', JSON.stringify(note))
reply(`Sukses Menambahkan Note\nKetik ${prefix}listnotes untuk mengecek`)
}
}
else{
	const addnote = {
		groupId : from,
		creator : sender,
		namanote : nnote,
		date : date,
		type : 'teks',
		media : '',
		caption : isi
	}
note.push(addnote)
fs.writeFileSync('./src/notes.json', JSON.stringify(note))
reply(`Sukses Menambahkan Note\nKetik ${prefix}listnotes untuk mengecek`)
}
break
case 'listnotes':
if(!isGroupAdmins && !itsMe) return reply(mess.only.admin)
idgc = []
tag = []
teks = `L I S T  N O T E  G R O U P\n\n`
for(let i of note){
idgc.push(i.groupId)
	if(from.includes(i.groupId)){
		teks += shp + ` Nama Note : ` + i.namanote + '\n'
		teks += shp + ` Creator : @` + i.creator.split('@')[0] + '\n'
		teks += shp + ` Tanggal : ` + i.date + '\n'
		teks += shp + ` Type Note : ` + i.type + '\n'
		teks += shp + ` Media : ` + i.media + '\n\n---------------------------------\n\n'
		tag.push(i.creator)
	}
}
if(!idgc.includes(from)){
return reply('Tidak ada notes digroup ini')
}
else{
wa.Mentions(from, teks, tag, tod)
}
break
case 'getnote':
nnote = [];
for(let i of note){
	if(from.includes(i.groupId)){
		nnote.push(i.namanote)
		if(q.includes(i.namanote)){
			teks = `N O T E\n\n`
			teks += shp + ' Nama Note : ' + i.namanote + '\n'
			teks += shp + ' Pembuat : @' + i.creator.split('@')[0] + '\n'
			teks += shp + ' Tanggal dibuat : ' + i.date + '\n'
			teks += shp + ' Type Note : ' + i.type + '\n\n'
			teks += `Note akan dikirim setelah pesan ini\nMohon tunggu...`
			await wa.Mentions(from, teks, [i.creator], tod)
			if(i.type == 'teks'){
				reply(i.caption)
			}
			else if(i.type == 'audio'){
				await reply('Caption Note : ' + i.caption)
				wa.sendFileFromUrl(from, i.media, tod)
			}
			else{
				wa.sendFileFromUrl(from, i.media, tod, i.caption, [i.creator])
			}
		}
	}
}
break
case 'delnote':
if(!itsMe && !isGroupAdmins) return reply(mess.only.admin)
nnote = [];
for(let i of note){
	if(from.includes(i.groupId)){
	nnote.push(i.namanote)
		if(q.includes(i.namanote)){
   			let del = note.indexOf(i)
   			note.splice(del, 1)
   			fs.writeFileSync('./src/notes.json', JSON.stringify(note))
   			reply(`Sukses Menghapus Note ${q}`)
			}
	}
}
break
case 'delete':
case 'del':
case 'd':
if (!isGroup)return reply(mess.only.group)
if(!tod.message.extendedTextMessage.contextInfo.participant === zynn.user.jid) return
zynn.deleteMessage(from, { id: tod.message.extendedTextMessage.contextInfo.stanzaId, remoteJid: from, fromMe: true })
break
case 'infobisnis':
if(!q) return reply(`Cara penggunaan : ${prefix}infobisnis tag orang/masukkan nomor whatsapp/n/nContoh : ${prefix}infobisnis 6281990498472\n\nNote : Nomor harus diawali dengan kode negara`)
if(isNaN(body.slice(13))) return reply('Input harus berupa nomor whatsapp!')
mentioned = args[0].replace('@', '') + '@s.whatsapp.net'
data = await isBusiness(mentioned)
console.log(data)
if(data == false) return reply('Nomor yang anda masukkan bukan akun bisnis!')
data2 = await wa.getbusinessprof(mentioned)
reply(JSON.stringify(data2, null, 2))
break
case 'q':
    if (!m.quoted) reply('reply pesan!')
    let o = zynn.serializeM(await m.getQuotedObj())
    if (!o.quoted) throw 'pesan yang anda reply tidak mengandung reply!'
    await o.quoted.copyNForward(m.chat, true)
    break
case 'getexif':
let webpv = require('node-webpmux')
const util = require('util')
        let imguy = new webpv.Image()
        await imguy.load(await m.quoted.download())
        reply(util.format(JSON.parse(imguy.exif.slice(22).toString())))
break
default:
	if (chats.startsWith('x')){
	if(!itsMe) return
		console.log(color('[EVAL]'), color(moment(tod.messageTimestamp * 1000).format('DD/MM/YY HH:mm:ss'), 'yellow'), color(`Eval brooo`))
			try{
            return fake(JSON.stringify(eval(chats.slice(2)), null, 2))
			}catch(err){
			e = String(err)
			fake(e)
		}
		}
	if (chats.startsWith('>')){
	if(!itsMe) return
		console.log(color('[EVAL]'), color(moment(tod.messageTimestamp * 1000).format('DD/MM/YY HH:mm:ss'), 'yellow'), color(`Eval V2 brooo`))
		try{
fake(require('util').format(await eval(`;(async () => { ${chats.slice(2)} })()`)))
}catch(err){
	e = String(err)
	fake(e)
	}
}
if (chats.startsWith('<')){
if(!itsMe) return
const util = require('util')
console.log(color('[EVAL]'), color(moment(tod.messageTimestamp * 1000).format('DD/MM/YY HH:mm:ss'), 'yellow'), color(`Eval V1 brooo`))
ras = chats.slice(2)
function _(rem) {
ren = JSON.stringify(rem,null,2)
pes = util.format(ren)
reply(pes)
}
try{q
reply(require('util').format(eval(`(async () => { ${ras} })()`)))
} catch(err) {
e = String(err)
reply(e)
}
}
break
   // console.log(e)

        }
    } catch (err) {
        console.log(color('[ERROR]', 'red'), err)
    }
}

